{"ast":null,"code":"// src/client.ts\nimport { createSyncStoragePersister } from \"@tanstack/query-sync-storage-persister\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { persistQueryClient } from \"@tanstack/react-query-persist-client\";\nimport { createClient as createCoreClient, createStorage, noopStorage } from \"@wagmi/core\";\nfunction createClient(_ref) {\n  let {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: {\n          cacheTime: 1e3 * 60 * 60 * 24,\n          networkMode: \"offlineFirst\",\n          refetchOnWindowFocus: false,\n          retry: 0\n        },\n        mutations: {\n          networkMode: \"offlineFirst\"\n        }\n      }\n    }),\n    storage = createStorage({\n      storage: typeof window !== \"undefined\" && window.localStorage ? window.localStorage : noopStorage\n    }),\n    persister = typeof window !== \"undefined\" ? createSyncStoragePersister({\n      key: \"cache\",\n      storage,\n      serialize: x => x,\n      deserialize: x => x\n    }) : void 0,\n    ...config\n  } = _ref;\n  const client = createCoreClient({\n    ...config,\n    storage\n  });\n  if (persister) persistQueryClient({\n    queryClient,\n    persister,\n    dehydrateOptions: {\n      shouldDehydrateQuery: query => query.cacheTime !== 0 && query.queryKey[0].persist !== false\n    }\n  });\n  return Object.assign(client, {\n    queryClient\n  });\n}\n\n// src/context.ts\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport * as React from \"react\";\nvar Context = React.createContext(void 0);\nvar queryClientContext = React.createContext(void 0);\nfunction WagmiConfig(_ref2) {\n  let {\n    children,\n    client\n  } = _ref2;\n  return React.createElement(Context.Provider, {\n    children: React.createElement(QueryClientProvider, {\n      children,\n      client: client.queryClient,\n      context: queryClientContext\n    }),\n    value: client\n  });\n}\nfunction useClient() {\n  const client = React.useContext(Context);\n  if (!client) throw new Error([\"`useClient` must be used within `WagmiConfig`.\\n\", \"Read more: https://wagmi.sh/react/WagmiConfig\"].join(\"\\n\"));\n  return client;\n}\n\n// src/hooks/accounts/useAccount.ts\nimport { getAccount, watchAccount } from \"@wagmi/core\";\nimport * as React7 from \"react\";\n\n// src/hooks/utils/query/useBaseQuery.ts\nimport { notifyManager, useIsRestoring, useQueryClient, useQueryErrorResetBoundary } from \"@tanstack/react-query\";\nimport * as React2 from \"react\";\n\n// src/hooks/utils/useSyncExternalStore.ts\nimport * as pkg from \"use-sync-external-store/shim/index.js\";\nvar useSyncExternalStore2 = pkg.useSyncExternalStore;\n\n// src/hooks/utils/query/utils.ts\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n  if (typeof arg2 === \"function\") {\n    return {\n      ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n  return {\n    ...arg2,\n    queryKey: arg1\n  };\n}\nfunction shouldThrowError(_useErrorBoundary, params) {\n  if (typeof _useErrorBoundary === \"function\") {\n    return _useErrorBoundary(...params);\n  }\n  return !!_useErrorBoundary;\n}\nfunction trackResult(result, observer) {\n  const trackedResult = {};\n  Object.keys(result).forEach(key => {\n    Object.defineProperty(trackedResult, key, {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        observer.trackedProps.add(key);\n        return result[key];\n      }\n    });\n  });\n  return trackedResult;\n}\n\n// src/hooks/utils/query/useBaseQuery.ts\nfunction useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options);\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n  const [observer] = React2.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore2(React2.useCallback(onStoreChange => isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React2.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  React2.useEffect(() => {\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]);\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(_ref3 => {\n      let {\n        data\n      } = _ref3;\n      defaultedOptions.onSuccess?.(data);\n      defaultedOptions.onSettled?.(data, null);\n    }).catch(error => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError?.(error);\n      defaultedOptions.onSettled?.(void 0, error);\n    });\n  }\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {\n    throw result.error;\n  }\n  const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n  const isIdle = status === \"idle\";\n  const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n  return {\n    ...result,\n    defaultedOptions,\n    isIdle,\n    isLoading,\n    observer,\n    status\n  };\n}\n\n// src/hooks/utils/query/useInfiniteQuery.ts\nimport { InfiniteQueryObserver } from \"@tanstack/react-query\";\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({\n    context: queryClientContext,\n    ...parsedOptions\n  }, InfiniteQueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchNextPage: baseQuery.fetchNextPage,\n    fetchStatus: baseQuery.fetchStatus,\n    hasNextPage: baseQuery.hasNextPage,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isFetchingNextPage: baseQuery.isFetchingNextPage,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useMutation.ts\nimport { parseMutationArgs, useMutation as useMutation_ } from \"@tanstack/react-query\";\nfunction useMutation(arg1, arg2, arg3) {\n  const options = parseMutationArgs(arg1, arg2, arg3);\n  return useMutation_({\n    context: queryClientContext,\n    ...options\n  });\n}\n\n// src/hooks/utils/query/useQuery.ts\nimport { QueryObserver } from \"@tanstack/react-query\";\nfunction useQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({\n    context: queryClientContext,\n    ...parsedOptions\n  }, QueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchStatus: baseQuery.fetchStatus,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useQueryClient.ts\nimport { useQueryClient as useQueryClient_ } from \"@tanstack/react-query\";\nvar useQueryClient2 = () => useQueryClient_({\n  context: queryClientContext\n});\n\n// src/hooks/providers/useProvider.ts\nimport { getProvider, watchProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useProvider() {\n  let {\n    chainId\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return useSyncExternalStoreWithSelector(cb => watchProvider({\n    chainId\n  }, cb), () => getProvider({\n    chainId\n  }), () => getProvider({\n    chainId\n  }), x => x, (a, b) => a.network.chainId === b.network.chainId);\n}\n\n// src/hooks/providers/useWebSocketProvider.ts\nimport { getWebSocketProvider, watchWebSocketProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector2 } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useWebSocketProvider() {\n  let {\n    chainId\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return useSyncExternalStoreWithSelector2(cb => watchWebSocketProvider({\n    chainId\n  }, cb), () => getWebSocketProvider({\n    chainId\n  }), () => getWebSocketProvider({\n    chainId\n  }), x => x, (a, b) => a?.network.chainId === b?.network.chainId);\n}\n\n// src/hooks/utils/useChainId.ts\nfunction useChainId() {\n  let {\n    chainId\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const provider = useProvider({\n    chainId\n  });\n  return provider.network.chainId;\n}\n\n// src/hooks/utils/useForceUpdate.ts\nimport * as React3 from \"react\";\nfunction useForceUpdate() {\n  const [, forceUpdate] = React3.useReducer(x => x + 1, 0);\n  return forceUpdate;\n}\n\n// src/hooks/network-status/useBlockNumber.ts\nimport { fetchBlockNumber } from \"@wagmi/core\";\nimport { debounce } from \"@wagmi/core/internal\";\nimport * as React4 from \"react\";\nfunction queryKey(_ref4) {\n  let {\n    chainId,\n    scopeKey\n  } = _ref4;\n  return [{\n    entity: \"blockNumber\",\n    chainId,\n    scopeKey\n  }];\n}\nfunction queryFn(_ref5) {\n  let {\n    queryKey: [{\n      chainId\n    }]\n  } = _ref5;\n  return fetchBlockNumber({\n    chainId\n  });\n}\nfunction useBlockNumber() {\n  let {\n    cacheTime = 0,\n    chainId: chainId_,\n    enabled = true,\n    scopeKey,\n    staleTime,\n    suspense,\n    watch = false,\n    onBlock,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const provider = useProvider({\n    chainId\n  });\n  const webSocketProvider = useWebSocketProvider({\n    chainId\n  });\n  const queryClient = useQueryClient2();\n  React4.useEffect(() => {\n    if (!enabled) return;\n    if (!watch && !onBlock) return;\n    const listener = debounce(blockNumber => {\n      if (watch) queryClient.setQueryData(queryKey({\n        chainId,\n        scopeKey\n      }), blockNumber);\n      if (onBlock) onBlock(blockNumber);\n    }, 1);\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"block\", listener);\n    return () => {\n      provider_.off(\"block\", listener);\n    };\n  }, [chainId, scopeKey, onBlock, provider, queryClient, watch, webSocketProvider, enabled]);\n  return useQuery(queryKey({\n    scopeKey,\n    chainId\n  }), queryFn, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/network-status/useFeeData.ts\nimport { fetchFeeData } from \"@wagmi/core\";\nimport * as React5 from \"react\";\nfunction queryKey2(_ref6) {\n  let {\n    chainId,\n    formatUnits,\n    scopeKey\n  } = _ref6;\n  return [{\n    entity: \"feeData\",\n    chainId,\n    formatUnits,\n    scopeKey\n  }];\n}\nfunction queryFn2(_ref7) {\n  let {\n    queryKey: [{\n      chainId,\n      formatUnits\n    }]\n  } = _ref7;\n  return fetchFeeData({\n    chainId,\n    formatUnits\n  });\n}\nfunction useFeeData() {\n  let {\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    formatUnits = \"wei\",\n    scopeKey,\n    staleTime,\n    suspense,\n    watch,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const queryKey_ = React5.useMemo(() => queryKey2({\n    chainId,\n    formatUnits,\n    scopeKey\n  }), [chainId, formatUnits, scopeKey]);\n  const feeDataQuery = useQuery(queryKey_, queryFn2, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch),\n    queryKey: queryKey_\n  });\n  return feeDataQuery;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\nfunction useInvalidateOnBlock(_ref8) {\n  let {\n    chainId,\n    enabled,\n    queryKey: queryKey17\n  } = _ref8;\n  const queryClient = useQueryClient2();\n  useBlockNumber({\n    chainId,\n    enabled,\n    onBlock: enabled ? () => queryClient.invalidateQueries(queryKey17) : void 0,\n    scopeKey: enabled ? void 0 : \"idle\"\n  });\n}\n\n// src/hooks/utils/useSyncExternalStoreWithTracked.ts\nimport { deepEqual } from \"@wagmi/core\";\nimport * as React6 from \"react\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector3 } from \"use-sync-external-store/shim/with-selector.js\";\nvar isPlainObject = obj => typeof obj === \"object\" && !Array.isArray(obj);\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot) {\n  let getServerSnapshot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getSnapshot;\n  let isEqual = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : deepEqual;\n  const trackedKeys = React6.useRef([]);\n  const result = useSyncExternalStoreWithSelector3(subscribe, getSnapshot, getServerSnapshot, x => x, (a, b) => {\n    if (isPlainObject(a) && isPlainObject(b) && trackedKeys.current.length) {\n      for (const key of trackedKeys.current) {\n        const equal = isEqual(a[key], b[key]);\n        if (!equal) return false;\n      }\n      return true;\n    }\n    return isEqual(a, b);\n  });\n  if (isPlainObject(result)) {\n    const trackedResult = {\n      ...result\n    };\n    Object.defineProperties(trackedResult, Object.entries(trackedResult).reduce((res, _ref9) => {\n      let [key, value] = _ref9;\n      return {\n        ...res,\n        [key]: {\n          configurable: false,\n          enumerable: true,\n          get: () => {\n            if (!trackedKeys.current.includes(key)) {\n              trackedKeys.current.push(key);\n            }\n            return value;\n          }\n        }\n      };\n    }, {}));\n    return trackedResult;\n  }\n  return result;\n}\n\n// src/hooks/accounts/useAccount.ts\nfunction useAccount() {\n  let {\n    onConnect,\n    onDisconnect\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const account = useSyncExternalStoreWithTracked(watchAccount, getAccount);\n  const previousAccountRef = React7.useRef();\n  const previousAccount = previousAccountRef.current ?? {};\n  if (!!onConnect && (previousAccount.status !== \"connected\" || previousAccount.status === void 0) && account.status === \"connected\") onConnect({\n    address: account.address,\n    connector: account.connector,\n    isReconnected: previousAccount.status === \"reconnecting\" || previousAccount.status === void 0\n  });\n  if (!!onDisconnect && previousAccount.status === \"connected\" && account.status === \"disconnected\") onDisconnect();\n  previousAccountRef.current = account;\n  return account;\n}\n\n// src/hooks/accounts/useBalance.ts\nimport { fetchBalance } from \"@wagmi/core\";\nimport * as React8 from \"react\";\nfunction queryKey3(_ref10) {\n  let {\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  } = _ref10;\n  return [{\n    entity: \"balance\",\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  }];\n}\nfunction queryFn3(_ref11) {\n  let {\n    queryKey: [{\n      address,\n      chainId,\n      formatUnits,\n      token\n    }]\n  } = _ref11;\n  if (!address) throw new Error(\"address is required\");\n  return fetchBalance({\n    address,\n    chainId,\n    formatUnits,\n    token\n  });\n}\nfunction useBalance() {\n  let {\n    address,\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    formatUnits,\n    scopeKey,\n    staleTime,\n    suspense,\n    token,\n    watch,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const queryKey_ = React8.useMemo(() => queryKey3({\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  }), [address, chainId, formatUnits, scopeKey, token]);\n  const balanceQuery = useQuery(queryKey_, queryFn3, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && address),\n    queryKey: queryKey_\n  });\n  return balanceQuery;\n}\n\n// src/hooks/accounts/useConnect.ts\nimport { connect } from \"@wagmi/core\";\nimport * as React9 from \"react\";\nvar mutationKey = args => [{\n  entity: \"connect\",\n  ...args\n}];\nvar mutationFn = args => {\n  const {\n    connector,\n    chainId\n  } = args;\n  if (!connector) throw new Error(\"connector is required\");\n  return connect({\n    connector,\n    chainId\n  });\n};\nfunction useConnect() {\n  let {\n    chainId,\n    connector,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const client = useClient();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey({\n    connector,\n    chainId\n  }), mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const connect2 = React9.useCallback(args => {\n    return mutate({\n      chainId: args?.chainId ?? chainId,\n      connector: args?.connector ?? connector\n    });\n  }, [chainId, connector, mutate]);\n  const connectAsync = React9.useCallback(args => {\n    return mutateAsync({\n      chainId: args?.chainId ?? chainId,\n      connector: args?.connector ?? connector\n    });\n  }, [chainId, connector, mutateAsync]);\n  return {\n    connect: connect2,\n    connectAsync,\n    connectors: client.connectors,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingConnector: variables?.connector,\n    reset,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useDisconnect.ts\nimport { disconnect } from \"@wagmi/core\";\nvar mutationKey2 = [{\n  entity: \"disconnect\"\n}];\nvar mutationFn2 = () => disconnect();\nfunction useDisconnect() {\n  let {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate: disconnect2,\n    mutateAsync: disconnectAsync,\n    reset,\n    status\n  } = useMutation(mutationKey2, mutationFn2, {\n    ...(onError ? {\n      onError(error2, _variables, context) {\n        onError(error2, context);\n      }\n    } : {}),\n    onMutate,\n    ...(onSettled ? {\n      onSettled(_data, error2, _variables, context) {\n        onSettled(error2, context);\n      }\n    } : {}),\n    ...(onSuccess ? {\n      onSuccess(_data, _variables, context) {\n        onSuccess(context);\n      }\n    } : {})\n  });\n  return {\n    disconnect: disconnect2,\n    disconnectAsync,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status\n  };\n}\n\n// src/hooks/accounts/useNetwork.ts\nimport { getNetwork, watchNetwork } from \"@wagmi/core\";\nfunction useNetwork() {\n  return useSyncExternalStoreWithTracked(watchNetwork, getNetwork);\n}\n\n// src/hooks/accounts/useSigner.ts\nimport { fetchSigner, watchSigner } from \"@wagmi/core\";\nimport * as React10 from \"react\";\nfunction queryKey4(_ref12) {\n  let {\n    chainId\n  } = _ref12;\n  return [{\n    entity: \"signer\",\n    chainId,\n    persist: false\n  }];\n}\nfunction queryFn4(_ref13) {\n  let {\n    queryKey: [{\n      chainId\n    }]\n  } = _ref13;\n  return fetchSigner({\n    chainId\n  });\n}\nfunction useSigner() {\n  let {\n    chainId: chainId_,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    connector\n  } = useAccount();\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const signerQuery = useQuery(queryKey4({\n    chainId\n  }), queryFn4, {\n    cacheTime: 0,\n    enabled: Boolean(connector),\n    staleTime: Infinity,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  const queryClient = useQueryClient2();\n  React10.useEffect(() => {\n    const unwatch = watchSigner({\n      chainId\n    }, signer => {\n      if (signer) queryClient.invalidateQueries(queryKey4({\n        chainId\n      }));else queryClient.removeQueries(queryKey4({\n        chainId\n      }));\n    });\n    return unwatch;\n  }, [queryClient, chainId]);\n  return signerQuery;\n}\n\n// src/hooks/accounts/useSignMessage.ts\nimport { signMessage } from \"@wagmi/core\";\nimport * as React11 from \"react\";\nvar mutationKey3 = args => [{\n  entity: \"signMessage\",\n  ...args\n}];\nvar mutationFn3 = args => {\n  const {\n    message\n  } = args;\n  if (!message) throw new Error(\"message is required\");\n  return signMessage({\n    message\n  });\n};\nfunction useSignMessage() {\n  let {\n    message,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey3({\n    message\n  }), mutationFn3, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signMessage2 = React11.useCallback(args => mutate(args || {\n    message\n  }), [message, mutate]);\n  const signMessageAsync = React11.useCallback(args => mutateAsync(args || {\n    message\n  }), [message, mutateAsync]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signMessage: signMessage2,\n    signMessageAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSignTypedData.ts\nimport { signTypedData } from \"@wagmi/core\";\nimport * as React12 from \"react\";\nfunction mutationKey4(_ref14) {\n  let {\n    domain,\n    types,\n    value\n  } = _ref14;\n  return [{\n    entity: \"signTypedData\",\n    domain,\n    types,\n    value\n  }];\n}\nfunction mutationFn4(args) {\n  const {\n    domain,\n    types,\n    value\n  } = args;\n  if (!domain) throw new Error(\"domain is required\");\n  if (!types) throw new Error(\"types is required\");\n  if (!value) throw new Error(\"value is required\");\n  return signTypedData({\n    domain,\n    types,\n    value\n  });\n}\nfunction useSignTypedData() {\n  let {\n    domain,\n    types,\n    value,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey4({\n    domain,\n    types,\n    value\n  }), mutationFn4, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signTypedData2 = React12.useCallback(args => mutate({\n    domain: args?.domain ?? domain,\n    types: args?.types ?? types,\n    value: args?.value ?? value\n  }), [domain, types, value, mutate]);\n  const signTypedDataAsync = React12.useCallback(args => mutateAsync({\n    domain: args?.domain ?? domain,\n    types: args?.types ?? types,\n    value: args?.value ?? value\n  }), [domain, types, value, mutateAsync]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signTypedData: signTypedData2,\n    signTypedDataAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSwitchNetwork.ts\nimport { switchNetwork } from \"@wagmi/core\";\nimport * as React13 from \"react\";\nvar mutationKey5 = args => [{\n  entity: \"switchNetwork\",\n  ...args\n}];\nvar mutationFn5 = args => {\n  const {\n    chainId\n  } = args;\n  if (!chainId) throw new Error(\"chainId is required\");\n  return switchNetwork({\n    chainId\n  });\n};\nfunction useSwitchNetwork() {\n  let {\n    chainId,\n    throwForSwitchChainNotSupported,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const client = useClient();\n  const forceUpdate = useForceUpdate();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey5({\n    chainId\n  }), mutationFn5, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const switchNetwork_ = React13.useCallback(chainId_ => mutate({\n    chainId: chainId_ ?? chainId\n  }), [chainId, mutate]);\n  const switchNetworkAsync_ = React13.useCallback(chainId_ => mutateAsync({\n    chainId: chainId_ ?? chainId\n  }), [chainId, mutateAsync]);\n  React13.useEffect(() => {\n    const unwatch = client.subscribe(_ref15 => {\n      let {\n        chains,\n        connector\n      } = _ref15;\n      return {\n        chains,\n        connector\n      };\n    }, forceUpdate);\n    return unwatch;\n  }, [client, forceUpdate]);\n  let switchNetwork2;\n  let switchNetworkAsync;\n  const supportsSwitchChain = !!client.connector?.switchChain;\n  if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n    switchNetwork2 = switchNetwork_;\n    switchNetworkAsync = switchNetworkAsync_;\n  }\n  return {\n    chains: client.chains ?? [],\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingChainId: variables?.chainId,\n    reset,\n    status,\n    switchNetwork: switchNetwork2,\n    switchNetworkAsync,\n    variables\n  };\n}\n\n// src/hooks/contracts/useContract.ts\nimport { getContract } from \"@wagmi/core\";\nimport * as React14 from \"react\";\nfunction useContract() {\n  let {\n    address,\n    abi,\n    signerOrProvider\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return React14.useMemo(() => {\n    if (!address || !abi) return null;\n    return getContract({\n      address,\n      abi,\n      signerOrProvider: signerOrProvider === null ? void 0 : signerOrProvider\n    });\n  }, [address, abi, signerOrProvider]);\n}\n\n// src/hooks/contracts/useContractEvent.ts\nimport * as React15 from \"react\";\nfunction useContractEvent() {\n  let {\n    address,\n    chainId,\n    abi,\n    listener,\n    eventName,\n    once\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const provider = useProvider({\n    chainId\n  });\n  const webSocketProvider = useWebSocketProvider({\n    chainId\n  });\n  const contract = useContract({\n    address,\n    abi,\n    signerOrProvider: webSocketProvider ?? provider\n  });\n  const callbackRef = React15.useRef(listener);\n  callbackRef.current = listener;\n  React15.useEffect(() => {\n    if (!contract || !eventName) return;\n    const handler = function () {\n      return callbackRef.current(...arguments);\n    };\n    if (once) contract.once(eventName, handler);else contract.on(eventName, handler);\n    return () => {\n      contract.off(eventName, handler);\n    };\n  }, [contract, eventName]);\n}\n\n// src/hooks/contracts/useContractInfiniteReads.ts\nimport { replaceEqualDeep } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual2, readContracts } from \"@wagmi/core\";\nimport * as React16 from \"react\";\nfunction queryKey5(_ref16) {\n  let {\n    allowFailure,\n    cacheKey,\n    overrides,\n    scopeKey\n  } = _ref16;\n  return [{\n    entity: \"readContractsInfinite\",\n    allowFailure,\n    cacheKey,\n    overrides,\n    scopeKey\n  }];\n}\nfunction queryFn5(_ref17) {\n  let {\n    contracts\n  } = _ref17;\n  return _ref18 => {\n    let {\n      queryKey: [{\n        allowFailure,\n        overrides\n      }],\n      pageParam\n    } = _ref18;\n    return readContracts({\n      allowFailure,\n      contracts: contracts(pageParam || void 0),\n      overrides\n    });\n  };\n}\nfunction useContractInfiniteReads(_ref19) {\n  let {\n    allowFailure,\n    cacheKey,\n    cacheTime,\n    contracts,\n    enabled: enabled_ = true,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    onError,\n    onSettled,\n    onSuccess,\n    overrides,\n    scopeKey,\n    select,\n    staleTime,\n    structuralSharing = (oldData, newData) => deepEqual2(oldData, newData) ? oldData : replaceEqualDeep(oldData, newData),\n    suspense\n  } = _ref19;\n  const queryKey_ = React16.useMemo(() => queryKey5({\n    allowFailure,\n    cacheKey,\n    overrides,\n    scopeKey\n  }), [allowFailure, cacheKey, overrides, scopeKey]);\n  const enabled = React16.useMemo(() => {\n    const enabled2 = Boolean(enabled_ && contracts);\n    return enabled2;\n  }, [contracts, enabled_]);\n  return useInfiniteQuery(queryKey_, queryFn5({\n    contracts\n  }), {\n    cacheTime,\n    enabled,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    select,\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\nfunction paginatedIndexesConfig(fn, _ref20) {\n  let {\n    perPage,\n    start,\n    direction\n  } = _ref20;\n  const contracts = function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return [...Array(perPage).keys()].map(index => {\n      return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n    }).filter(index => index >= 0).map(fn).flat();\n  };\n  return {\n    contracts,\n    getNextPageParam(lastPage, pages) {\n      return lastPage?.length === perPage ? pages.length : void 0;\n    }\n  };\n}\n\n// src/hooks/contracts/useContractRead.ts\nimport { replaceEqualDeep as replaceEqualDeep2 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual3, parseContractResult, readContract } from \"@wagmi/core\";\nimport * as React17 from \"react\";\nfunction queryKey6(_ref21) {\n  let {\n    address,\n    args,\n    blockNumber,\n    chainId,\n    functionName,\n    overrides,\n    scopeKey\n  } = _ref21;\n  return [{\n    entity: \"readContract\",\n    address,\n    args,\n    blockNumber,\n    chainId,\n    functionName,\n    overrides,\n    scopeKey\n  }];\n}\nfunction queryFn6(_ref22) {\n  let {\n    abi\n  } = _ref22;\n  return async _ref23 => {\n    let {\n      queryKey: [{\n        address,\n        args,\n        chainId,\n        functionName,\n        overrides\n      }]\n    } = _ref23;\n    if (!abi) throw new Error(\"abi is required\");\n    if (!address) throw new Error(\"address is required\");\n    return (await readContract({\n      address,\n      args,\n      chainId,\n      abi,\n      functionName,\n      overrides\n    })) ?? null;\n  };\n}\nfunction useContractRead() {\n  let {\n    abi,\n    address,\n    args,\n    cacheOnBlock = false,\n    cacheTime,\n    chainId: chainId_,\n    enabled: enabled_ = true,\n    functionName,\n    isDataEqual,\n    onError,\n    onSettled,\n    onSuccess,\n    overrides,\n    scopeKey,\n    select,\n    staleTime,\n    structuralSharing = (oldData, newData) => deepEqual3(oldData, newData) ? oldData : replaceEqualDeep2(oldData, newData),\n    suspense,\n    watch\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const {\n    data: blockNumber\n  } = useBlockNumber({\n    chainId,\n    enabled: watch || cacheOnBlock,\n    scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n    watch\n  });\n  const queryKey_ = React17.useMemo(() => queryKey6({\n    address,\n    args,\n    blockNumber: cacheOnBlock ? blockNumber : void 0,\n    chainId,\n    functionName,\n    overrides,\n    scopeKey\n  }), [address, args, blockNumber, cacheOnBlock, chainId, functionName, overrides, scopeKey]);\n  const enabled = React17.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && abi && address && functionName);\n    if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [abi, address, blockNumber, cacheOnBlock, enabled_, functionName]);\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  return useQuery(queryKey_, queryFn6({\n    abi\n  }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    select(data) {\n      const result = abi && functionName ? parseContractResult({\n        abi,\n        data,\n        functionName\n      }) : data;\n      return select ? select(result) : result;\n    },\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractReads.ts\nimport { replaceEqualDeep as replaceEqualDeep3 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual4, parseContractResult as parseContractResult2, readContracts as readContracts2 } from \"@wagmi/core\";\nimport * as React18 from \"react\";\nfunction queryKey7(_ref24) {\n  let {\n    allowFailure,\n    blockNumber,\n    chainId,\n    contracts,\n    overrides,\n    scopeKey\n  } = _ref24;\n  return [{\n    entity: \"readContracts\",\n    allowFailure,\n    blockNumber,\n    chainId,\n    scopeKey,\n    contracts: (contracts ?? []).map(_ref25 => {\n      let {\n        address,\n        args,\n        chainId: chainId2,\n        functionName\n      } = _ref25;\n      return {\n        address,\n        args,\n        chainId: chainId2,\n        functionName\n      };\n    }),\n    overrides\n  }];\n}\nfunction queryFn7(_ref26) {\n  let {\n    abis\n  } = _ref26;\n  return _ref27 => {\n    let {\n      queryKey: [{\n        allowFailure,\n        contracts: contracts_,\n        overrides\n      }]\n    } = _ref27;\n    const contracts = contracts_.map((contract, i) => ({\n      ...contract,\n      abi: abis[i]\n    }));\n    return readContracts2({\n      allowFailure,\n      contracts,\n      overrides\n    });\n  };\n}\nfunction useContractReads() {\n  let {\n    allowFailure = true,\n    cacheOnBlock = false,\n    cacheTime,\n    contracts,\n    enabled: enabled_ = true,\n    isDataEqual,\n    keepPreviousData,\n    onError,\n    onSettled,\n    onSuccess,\n    overrides,\n    scopeKey,\n    select,\n    staleTime,\n    structuralSharing = (oldData, newData) => deepEqual4(oldData, newData) ? oldData : replaceEqualDeep3(oldData, newData),\n    suspense,\n    watch\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data: blockNumber\n  } = useBlockNumber({\n    enabled: watch || cacheOnBlock,\n    watch\n  });\n  const chainId = useChainId();\n  const queryKey_ = React18.useMemo(() => queryKey7({\n    allowFailure,\n    blockNumber: cacheOnBlock ? blockNumber : void 0,\n    chainId,\n    contracts,\n    overrides,\n    scopeKey\n  }), [allowFailure, blockNumber, cacheOnBlock, chainId, scopeKey, contracts, overrides]);\n  const enabled = React18.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && contracts?.every(x => x.abi && x.address && x.functionName));\n    if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [blockNumber, cacheOnBlock, contracts, enabled_]);\n  useInvalidateOnBlock({\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  const abis = (contracts ?? []).map(_ref28 => {\n    let {\n      abi\n    } = _ref28;\n    return abi;\n  });\n  return useQuery(queryKey_, queryFn7({\n    abis\n  }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    keepPreviousData,\n    staleTime,\n    select(data) {\n      const result = data.map((data2, i) => {\n        const {\n          abi,\n          functionName\n        } = contracts?.[i] ?? {};\n        return abi && functionName ? parseContractResult2({\n          abi,\n          functionName,\n          data: data2\n        }) : data2;\n      });\n      return select ? select(result) : result;\n    },\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractWrite.ts\nimport { writeContract } from \"@wagmi/core\";\nimport * as React19 from \"react\";\nfunction mutationKey6(_ref29) {\n  let {\n    address,\n    args,\n    chainId,\n    abi,\n    functionName,\n    overrides,\n    request\n  } = _ref29;\n  return [{\n    entity: \"writeContract\",\n    address,\n    args,\n    chainId,\n    abi,\n    functionName,\n    overrides,\n    request\n  }];\n}\nfunction mutationFn6(_ref30) {\n  let {\n    address,\n    args,\n    chainId,\n    abi,\n    functionName,\n    mode,\n    overrides,\n    request\n  } = _ref30;\n  if (!address) throw new Error(\"address is required\");\n  if (!abi) throw new Error(\"abi is required\");\n  if (!functionName) throw new Error(\"functionName is required\");\n  switch (mode) {\n    case \"prepared\":\n      {\n        if (!request) throw new Error(\"request is required\");\n        return writeContract({\n          mode: \"prepared\",\n          address,\n          chainId,\n          abi,\n          functionName,\n          request\n        });\n      }\n    case \"recklesslyUnprepared\":\n      return writeContract({\n        address,\n        abi,\n        functionName,\n        args,\n        chainId,\n        mode: \"recklesslyUnprepared\",\n        overrides\n      });\n  }\n}\nfunction useContractWrite() {\n  let {\n    address,\n    args,\n    chainId,\n    abi,\n    functionName,\n    mode,\n    overrides,\n    request,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey6({\n    address,\n    abi,\n    functionName,\n    args,\n    chainId,\n    mode,\n    overrides,\n    request\n  }), mutationFn6, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const write = React19.useCallback(overrideConfig => {\n    return mutate({\n      address,\n      args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n      chainId,\n      abi,\n      functionName,\n      mode: overrideConfig ? \"recklesslyUnprepared\" : mode,\n      overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides,\n      request\n    });\n  }, [address, args, chainId, abi, functionName, mode, mutate, overrides, request]);\n  const writeAsync = React19.useCallback(overrideConfig => {\n    return mutateAsync({\n      address,\n      args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n      chainId,\n      abi,\n      functionName,\n      mode: overrideConfig ? \"recklesslyUnprepared\" : mode,\n      overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides,\n      request\n    });\n  }, [address, args, chainId, abi, functionName, mode, mutateAsync, overrides, request]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    write: mode === \"prepared\" && !request ? void 0 : write,\n    writeAsync: mode === \"prepared\" && !request ? void 0 : writeAsync\n  };\n}\n\n// src/hooks/contracts/usePrepareContractWrite.ts\nimport { prepareWriteContract } from \"@wagmi/core\";\nfunction queryKey8(_ref31) {\n  let {\n    activeChainId,\n    args,\n    address,\n    chainId,\n    functionName,\n    overrides,\n    signerAddress\n  } = _ref31;\n  return [{\n    entity: \"prepareContractTransaction\",\n    activeChainId,\n    address,\n    args,\n    chainId,\n    functionName,\n    overrides,\n    signerAddress\n  }];\n}\nfunction queryFn8(_ref32) {\n  let {\n    abi,\n    signer\n  } = _ref32;\n  return _ref33 => {\n    let {\n      queryKey: [{\n        args,\n        address,\n        chainId,\n        functionName,\n        overrides\n      }]\n    } = _ref33;\n    if (!abi) throw new Error(\"abi is required\");\n    return prepareWriteContract({\n      abi,\n      args,\n      address,\n      chainId,\n      functionName,\n      overrides,\n      signer\n    });\n  };\n}\nfunction usePrepareContractWrite() {\n  let {\n    address,\n    abi,\n    functionName,\n    chainId,\n    args,\n    overrides,\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chain: activeChain\n  } = useNetwork();\n  const {\n    data: signer\n  } = useSigner({\n    chainId\n  });\n  const prepareContractWriteQuery = useQuery(queryKey8({\n    activeChainId: activeChain?.id,\n    address,\n    args,\n    chainId,\n    functionName,\n    scopeKey,\n    signerAddress: signer?._address,\n    overrides\n  }), queryFn8({\n    abi,\n    signer\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && abi && address && functionName && signer),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  return Object.assign(prepareContractWriteQuery, {\n    config: {\n      abi,\n      address,\n      args,\n      functionName,\n      mode: \"prepared\",\n      overrides,\n      request: void 0,\n      ...prepareContractWriteQuery.data\n    }\n  });\n}\n\n// src/hooks/contracts/useToken.ts\nimport { fetchToken } from \"@wagmi/core\";\nfunction queryKey9(_ref34) {\n  let {\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  } = _ref34;\n  return [{\n    entity: \"token\",\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  }];\n}\nfunction queryFn9(_ref35) {\n  let {\n    queryKey: [{\n      address,\n      chainId,\n      formatUnits\n    }]\n  } = _ref35;\n  if (!address) throw new Error(\"address is required\");\n  return fetchToken({\n    address,\n    chainId,\n    formatUnits\n  });\n}\nfunction useToken() {\n  let {\n    address,\n    chainId: chainId_,\n    formatUnits = \"ether\",\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey9({\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  }), queryFn9, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAddress.ts\nimport { fetchEnsAddress } from \"@wagmi/core\";\nfunction queryKey10(_ref36) {\n  let {\n    chainId,\n    name,\n    scopeKey\n  } = _ref36;\n  return [{\n    entity: \"ensAddress\",\n    chainId,\n    name,\n    scopeKey\n  }];\n}\nfunction queryFn10(_ref37) {\n  let {\n    queryKey: [{\n      chainId,\n      name\n    }]\n  } = _ref37;\n  if (!name) throw new Error(\"name is required\");\n  return fetchEnsAddress({\n    chainId,\n    name\n  });\n}\nfunction useEnsAddress() {\n  let {\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    name,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey10({\n    chainId,\n    name,\n    scopeKey\n  }), queryFn10, {\n    cacheTime,\n    enabled: Boolean(enabled && chainId && name),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAvatar.ts\nimport { fetchEnsAvatar } from \"@wagmi/core\";\nfunction queryKey11(_ref38) {\n  let {\n    address,\n    chainId,\n    scopeKey\n  } = _ref38;\n  return [{\n    entity: \"ensAvatar\",\n    address,\n    chainId,\n    scopeKey\n  }];\n}\nfunction queryFn11(_ref39) {\n  let {\n    queryKey: [{\n      address,\n      chainId\n    }]\n  } = _ref39;\n  if (!address) throw new Error(\"address is required\");\n  return fetchEnsAvatar({\n    address,\n    chainId\n  });\n}\nfunction useEnsAvatar() {\n  let {\n    address,\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey11({\n    address,\n    chainId,\n    scopeKey\n  }), queryFn11, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsName.ts\nimport { fetchEnsName } from \"@wagmi/core\";\nfunction queryKey12(_ref40) {\n  let {\n    address,\n    chainId,\n    scopeKey\n  } = _ref40;\n  return [{\n    entity: \"ensName\",\n    address,\n    chainId,\n    scopeKey\n  }];\n}\nfunction queryFn12(_ref41) {\n  let {\n    queryKey: [{\n      address,\n      chainId\n    }]\n  } = _ref41;\n  if (!address) throw new Error(\"address is required\");\n  return fetchEnsName({\n    address,\n    chainId\n  });\n}\nfunction useEnsName() {\n  let {\n    address,\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey12({\n    address,\n    chainId,\n    scopeKey\n  }), queryFn12, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsResolver.ts\nimport { fetchEnsResolver } from \"@wagmi/core\";\nfunction queryKey13(_ref42) {\n  let {\n    chainId,\n    name,\n    scopeKey\n  } = _ref42;\n  return [{\n    entity: \"ensResolver\",\n    chainId,\n    name,\n    scopeKey,\n    persist: false\n  }];\n}\nfunction queryFn13(_ref43) {\n  let {\n    queryKey: [{\n      chainId,\n      name\n    }]\n  } = _ref43;\n  if (!name) throw new Error(\"name is required\");\n  return fetchEnsResolver({\n    chainId,\n    name\n  });\n}\nfunction useEnsResolver() {\n  let {\n    chainId: chainId_,\n    name,\n    enabled = true,\n    scopeKey,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey13({\n    chainId,\n    name,\n    scopeKey\n  }), queryFn13, {\n    cacheTime: 0,\n    enabled: Boolean(enabled && chainId && name),\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/usePrepareSendTransaction.ts\nimport { prepareSendTransaction } from \"@wagmi/core\";\nfunction queryKey14(_ref44) {\n  let {\n    activeChainId,\n    chainId,\n    request,\n    scopeKey,\n    signerAddress\n  } = _ref44;\n  return [{\n    entity: \"prepareSendTransaction\",\n    activeChainId,\n    chainId,\n    request,\n    scopeKey,\n    signerAddress\n  }];\n}\nfunction queryFn14(_ref45) {\n  let {\n    signer\n  } = _ref45;\n  return _ref46 => {\n    let {\n      queryKey: [{\n        chainId,\n        request\n      }]\n    } = _ref46;\n    if (!request?.to) throw new Error(\"request.to is required\");\n    return prepareSendTransaction({\n      chainId,\n      request: {\n        ...request,\n        to: request.to\n      },\n      signer\n    });\n  };\n}\nfunction usePrepareSendTransaction() {\n  let {\n    chainId,\n    request,\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chain: activeChain\n  } = useNetwork();\n  const {\n    data: signer\n  } = useSigner({\n    chainId\n  });\n  const prepareSendTransactionQuery = useQuery(queryKey14({\n    activeChainId: activeChain?.id,\n    chainId,\n    request,\n    scopeKey,\n    signerAddress: signer?._address\n  }), queryFn14({\n    signer\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && signer && request && request.to),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  return Object.assign(prepareSendTransactionQuery, {\n    config: {\n      request: void 0,\n      mode: \"prepared\",\n      ...prepareSendTransactionQuery.data\n    }\n  });\n}\n\n// src/hooks/transactions/useSendTransaction.ts\nimport { sendTransaction } from \"@wagmi/core\";\nimport * as React20 from \"react\";\nvar mutationKey7 = args => [{\n  entity: \"sendTransaction\",\n  ...args\n}];\nvar mutationFn7 = _ref47 => {\n  let {\n    chainId,\n    mode,\n    request\n  } = _ref47;\n  return sendTransaction({\n    chainId,\n    mode,\n    request\n  });\n};\nfunction useSendTransaction(_ref48) {\n  let {\n    chainId,\n    mode,\n    request,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = _ref48;\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey7({\n    chainId,\n    mode,\n    request\n  }), mutationFn7, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const sendTransaction2 = React20.useCallback(args => mutate({\n    chainId,\n    mode,\n    request: args?.recklesslySetUnpreparedRequest ?? request\n  }), [chainId, mode, mutate, request]);\n  const sendTransactionAsync = React20.useCallback(args => mutateAsync({\n    chainId,\n    mode,\n    request: args?.recklesslySetUnpreparedRequest ?? request\n  }), [chainId, mode, mutateAsync, request]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    sendTransaction: mode === \"prepared\" && !request ? void 0 : sendTransaction2,\n    sendTransactionAsync: mode === \"prepared\" && !request ? void 0 : sendTransactionAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/transactions/useTransaction.ts\nimport { fetchTransaction } from \"@wagmi/core\";\nfunction queryKey15(_ref49) {\n  let {\n    chainId,\n    hash,\n    scopeKey\n  } = _ref49;\n  return [{\n    entity: \"transaction\",\n    chainId,\n    hash,\n    scopeKey\n  }];\n}\nfunction queryFn15(_ref50) {\n  let {\n    queryKey: [{\n      chainId,\n      hash\n    }]\n  } = _ref50;\n  if (!hash) throw new Error(\"hash is required\");\n  return fetchTransaction({\n    chainId,\n    hash\n  });\n}\nfunction useTransaction() {\n  let {\n    cacheTime = 0,\n    chainId: chainId_,\n    enabled = true,\n    hash,\n    scopeKey,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey15({\n    chainId,\n    hash,\n    scopeKey\n  }), queryFn15, {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWaitForTransaction.ts\nimport { waitForTransaction } from \"@wagmi/core\";\nfunction queryKey16(_ref51) {\n  let {\n    confirmations,\n    chainId,\n    hash,\n    scopeKey,\n    timeout\n  } = _ref51;\n  return [{\n    entity: \"waitForTransaction\",\n    confirmations,\n    chainId,\n    hash,\n    scopeKey,\n    timeout\n  }];\n}\nfunction queryFn16(_ref52) {\n  let {\n    onSpeedUp\n  } = _ref52;\n  return _ref53 => {\n    let {\n      queryKey: [{\n        chainId,\n        confirmations,\n        hash,\n        timeout\n      }]\n    } = _ref53;\n    if (!hash) throw new Error(\"hash is required\");\n    return waitForTransaction({\n      chainId,\n      confirmations,\n      hash,\n      onSpeedUp,\n      timeout\n    });\n  };\n}\nfunction useWaitForTransaction() {\n  let {\n    chainId: chainId_,\n    confirmations,\n    hash,\n    timeout,\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime,\n    suspense,\n    onError,\n    onSpeedUp,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey16({\n    chainId,\n    confirmations,\n    hash,\n    scopeKey,\n    timeout\n  }), queryFn16({\n    onSpeedUp\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWatchPendingTransactions.ts\nimport * as React21 from \"react\";\nfunction useWatchPendingTransactions(_ref54) {\n  let {\n    chainId: chainId_,\n    enabled = true,\n    listener\n  } = _ref54;\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const provider = useProvider({\n    chainId\n  });\n  const webSocketProvider = useWebSocketProvider({\n    chainId\n  });\n  React21.useEffect(() => {\n    if (!enabled) return;\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"pending\", listener);\n    return () => {\n      provider_.off(\"pending\", listener);\n    };\n  }, [enabled, listener, provider, webSocketProvider]);\n}\n\n// src/index.ts\nimport { AddChainError, ChainDoesNotSupportMulticallError, ChainMismatchError, ChainNotConfiguredError, Connector, ConnectorAlreadyConnectedError, ConnectorNotFoundError, ContractMethodDoesNotExistError, ContractMethodNoResultError, ContractMethodRevertedError, ContractResultDecodeError, ProviderChainsNotFound, ProviderRpcError, ResourceUnavailableError, RpcError, SwitchChainError, SwitchChainNotSupportedError, UserRejectedRequestError, configureChains, createStorage as createStorage2, deepEqual as deepEqual5, deserialize, erc20ABI, erc721ABI, erc4626ABI, goerli, mainnet, readContracts as readContracts3, serialize } from \"@wagmi/core\";\nexport { AddChainError, ChainDoesNotSupportMulticallError, ChainMismatchError, ChainNotConfiguredError, Connector, ConnectorAlreadyConnectedError, ConnectorNotFoundError, Context, ContractMethodDoesNotExistError, ContractMethodNoResultError, ContractMethodRevertedError, ContractResultDecodeError, ProviderChainsNotFound, ProviderRpcError, ResourceUnavailableError, RpcError, SwitchChainError, SwitchChainNotSupportedError, UserRejectedRequestError, WagmiConfig, configureChains, createClient, createStorage2 as createStorage, deepEqual5 as deepEqual, deserialize, erc20ABI, erc4626ABI, erc721ABI, goerli, mainnet, paginatedIndexesConfig, readContracts3 as readContracts, serialize, useAccount, useBalance, useBlockNumber, useChainId, useClient, useConnect, useContract, useContractEvent, useContractInfiniteReads, useContractRead, useContractReads, useContractWrite, useDisconnect, useEnsAddress, useEnsAvatar, useEnsName, useEnsResolver, useFeeData, useInfiniteQuery, useMutation, useNetwork, usePrepareContractWrite, usePrepareSendTransaction, useProvider, useQuery, useQueryClient2 as useQueryClient, useSendTransaction, useSignMessage, useSignTypedData, useSigner, useSwitchNetwork, useToken, useTransaction, useWaitForTransaction, useWatchPendingTransactions, useWebSocketProvider };","map":{"version":3,"names":["createSyncStoragePersister","QueryClient","persistQueryClient","createClient","createCoreClient","createStorage","noopStorage","_ref","queryClient","defaultOptions","queries","cacheTime","networkMode","refetchOnWindowFocus","retry","mutations","storage","window","localStorage","persister","key","serialize","x","deserialize","config","client","dehydrateOptions","shouldDehydrateQuery","query","queryKey","persist","Object","assign","QueryClientProvider","React","Context","createContext","queryClientContext","WagmiConfig","_ref2","children","createElement","Provider","context","value","useClient","useContext","Error","join","getAccount","watchAccount","React7","notifyManager","useIsRestoring","useQueryClient","useQueryErrorResetBoundary","React2","pkg","useSyncExternalStore2","useSyncExternalStore","isQueryKey","Array","isArray","parseQueryArgs","arg1","arg2","arg3","queryFn","shouldThrowError","_useErrorBoundary","params","trackResult","result","observer","trackedResult","keys","forEach","defineProperty","configurable","enumerable","get","trackedProps","add","useBaseQuery","options","Observer","isRestoring","errorResetBoundary","defaultedOptions","defaultQueryOptions","_optimisticResults","onError","batchCalls","onSuccess","onSettled","suspense","staleTime","useErrorBoundary","isReset","retryOnMount","useState","getOptimisticResult","useCallback","onStoreChange","subscribe","getCurrentResult","useEffect","clearReset","setOptions","listeners","isLoading","isFetching","fetchOptimistic","then","_ref3","data","catch","error","isError","getCurrentQuery","status","fetchStatus","isIdle","InfiniteQueryObserver","useInfiniteQuery","parsedOptions","baseQuery","fetchNextPage","hasNextPage","isFetched","isFetchedAfterMount","isFetchingNextPage","isRefetching","isSuccess","refetch","internal","dataUpdatedAt","errorUpdatedAt","failureCount","isLoadingError","isPaused","isPlaceholderData","isPreviousData","isRefetchError","isStale","remove","notifyOnChangeProps","parseMutationArgs","useMutation","useMutation_","QueryObserver","useQuery","useQueryClient_","useQueryClient2","getProvider","watchProvider","useSyncExternalStoreWithSelector","useProvider","chainId","arguments","length","undefined","cb","a","b","network","getWebSocketProvider","watchWebSocketProvider","useSyncExternalStoreWithSelector2","useWebSocketProvider","useChainId","provider","React3","useForceUpdate","forceUpdate","useReducer","fetchBlockNumber","debounce","React4","_ref4","scopeKey","entity","_ref5","useBlockNumber","chainId_","enabled","watch","onBlock","webSocketProvider","listener","blockNumber","setQueryData","provider_","on","off","fetchFeeData","React5","queryKey2","_ref6","formatUnits","queryFn2","_ref7","useFeeData","queryKey_","useMemo","feeDataQuery","useInvalidateOnBlock","Boolean","_ref8","queryKey17","invalidateQueries","deepEqual","React6","useSyncExternalStoreWithSelector3","isPlainObject","obj","useSyncExternalStoreWithTracked","getSnapshot","getServerSnapshot","isEqual","trackedKeys","useRef","current","equal","defineProperties","entries","reduce","res","_ref9","includes","push","useAccount","onConnect","onDisconnect","account","previousAccountRef","previousAccount","address","connector","isReconnected","fetchBalance","React8","queryKey3","_ref10","token","queryFn3","_ref11","useBalance","balanceQuery","connect","React9","mutationKey","args","mutationFn","useConnect","onMutate","mutate","mutateAsync","reset","variables","connect2","connectAsync","connectors","pendingConnector","disconnect","mutationKey2","mutationFn2","useDisconnect","disconnect2","disconnectAsync","error2","_variables","_data","getNetwork","watchNetwork","useNetwork","fetchSigner","watchSigner","React10","queryKey4","_ref12","queryFn4","_ref13","useSigner","signerQuery","Infinity","unwatch","signer","removeQueries","signMessage","React11","mutationKey3","mutationFn3","message","useSignMessage","signMessage2","signMessageAsync","signTypedData","React12","mutationKey4","_ref14","domain","types","mutationFn4","useSignTypedData","signTypedData2","signTypedDataAsync","switchNetwork","React13","mutationKey5","mutationFn5","useSwitchNetwork","throwForSwitchChainNotSupported","switchNetwork_","switchNetworkAsync_","_ref15","chains","switchNetwork2","switchNetworkAsync","supportsSwitchChain","switchChain","pendingChainId","getContract","React14","useContract","abi","signerOrProvider","React15","useContractEvent","eventName","once","contract","callbackRef","handler","replaceEqualDeep","deepEqual2","readContracts","React16","queryKey5","_ref16","allowFailure","cacheKey","overrides","queryFn5","_ref17","contracts","_ref18","pageParam","useContractInfiniteReads","_ref19","enabled_","getNextPageParam","isDataEqual","keepPreviousData","select","structuralSharing","oldData","newData","enabled2","paginatedIndexesConfig","fn","_ref20","perPage","start","direction","page","map","index","filter","flat","lastPage","pages","replaceEqualDeep2","deepEqual3","parseContractResult","readContract","React17","queryKey6","_ref21","functionName","queryFn6","_ref22","_ref23","useContractRead","cacheOnBlock","replaceEqualDeep3","deepEqual4","parseContractResult2","readContracts2","React18","queryKey7","_ref24","_ref25","chainId2","queryFn7","_ref26","abis","_ref27","contracts_","i","useContractReads","every","_ref28","data2","writeContract","React19","mutationKey6","_ref29","request","mutationFn6","_ref30","mode","useContractWrite","write","overrideConfig","recklesslySetUnpreparedArgs","recklesslySetUnpreparedOverrides","writeAsync","prepareWriteContract","queryKey8","_ref31","activeChainId","signerAddress","queryFn8","_ref32","_ref33","usePrepareContractWrite","chain","activeChain","prepareContractWriteQuery","id","_address","fetchToken","queryKey9","_ref34","queryFn9","_ref35","useToken","fetchEnsAddress","queryKey10","_ref36","name","queryFn10","_ref37","useEnsAddress","fetchEnsAvatar","queryKey11","_ref38","queryFn11","_ref39","useEnsAvatar","fetchEnsName","queryKey12","_ref40","queryFn12","_ref41","useEnsName","fetchEnsResolver","queryKey13","_ref42","queryFn13","_ref43","useEnsResolver","prepareSendTransaction","queryKey14","_ref44","queryFn14","_ref45","_ref46","to","usePrepareSendTransaction","prepareSendTransactionQuery","sendTransaction","React20","mutationKey7","mutationFn7","_ref47","useSendTransaction","_ref48","sendTransaction2","recklesslySetUnpreparedRequest","sendTransactionAsync","fetchTransaction","queryKey15","_ref49","hash","queryFn15","_ref50","useTransaction","waitForTransaction","queryKey16","_ref51","confirmations","timeout","queryFn16","_ref52","onSpeedUp","_ref53","useWaitForTransaction","React21","useWatchPendingTransactions","_ref54","AddChainError","ChainDoesNotSupportMulticallError","ChainMismatchError","ChainNotConfiguredError","Connector","ConnectorAlreadyConnectedError","ConnectorNotFoundError","ContractMethodDoesNotExistError","ContractMethodNoResultError","ContractMethodRevertedError","ContractResultDecodeError","ProviderChainsNotFound","ProviderRpcError","ResourceUnavailableError","RpcError","SwitchChainError","SwitchChainNotSupportedError","UserRejectedRequestError","configureChains","createStorage2","deepEqual5","erc20ABI","erc721ABI","erc4626ABI","goerli","mainnet","readContracts3"],"sources":["/Volumes/Gmako-DATA/DAPP Projects/SwapDex/swapdex/dex/node_modules/wagmi/dist/index.js"],"sourcesContent":["// src/client.ts\nimport { createSyncStoragePersister } from \"@tanstack/query-sync-storage-persister\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { persistQueryClient } from \"@tanstack/react-query-persist-client\";\nimport {\n  createClient as createCoreClient,\n  createStorage,\n  noopStorage\n} from \"@wagmi/core\";\nfunction createClient({\n  queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        cacheTime: 1e3 * 60 * 60 * 24,\n        networkMode: \"offlineFirst\",\n        refetchOnWindowFocus: false,\n        retry: 0\n      },\n      mutations: {\n        networkMode: \"offlineFirst\"\n      }\n    }\n  }),\n  storage = createStorage({\n    storage: typeof window !== \"undefined\" && window.localStorage ? window.localStorage : noopStorage\n  }),\n  persister = typeof window !== \"undefined\" ? createSyncStoragePersister({\n    key: \"cache\",\n    storage,\n    serialize: (x) => x,\n    deserialize: (x) => x\n  }) : void 0,\n  ...config\n}) {\n  const client = createCoreClient({\n    ...config,\n    storage\n  });\n  if (persister)\n    persistQueryClient({\n      queryClient,\n      persister,\n      dehydrateOptions: {\n        shouldDehydrateQuery: (query) => query.cacheTime !== 0 && query.queryKey[0].persist !== false\n      }\n    });\n  return Object.assign(client, { queryClient });\n}\n\n// src/context.ts\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport * as React from \"react\";\nvar Context = React.createContext(void 0);\nvar queryClientContext = React.createContext(\n  void 0\n);\nfunction WagmiConfig({\n  children,\n  client\n}) {\n  return React.createElement(Context.Provider, {\n    children: React.createElement(QueryClientProvider, {\n      children,\n      client: client.queryClient,\n      context: queryClientContext\n    }),\n    value: client\n  });\n}\nfunction useClient() {\n  const client = React.useContext(Context);\n  if (!client)\n    throw new Error(\n      [\n        \"`useClient` must be used within `WagmiConfig`.\\n\",\n        \"Read more: https://wagmi.sh/react/WagmiConfig\"\n      ].join(\"\\n\")\n    );\n  return client;\n}\n\n// src/hooks/accounts/useAccount.ts\nimport { getAccount, watchAccount } from \"@wagmi/core\";\nimport * as React7 from \"react\";\n\n// src/hooks/utils/query/useBaseQuery.ts\nimport {\n  notifyManager,\n  useIsRestoring,\n  useQueryClient,\n  useQueryErrorResetBoundary\n} from \"@tanstack/react-query\";\nimport * as React2 from \"react\";\n\n// src/hooks/utils/useSyncExternalStore.ts\nimport * as pkg from \"use-sync-external-store/shim/index.js\";\nvar useSyncExternalStore2 = pkg.useSyncExternalStore;\n\n// src/hooks/utils/query/utils.ts\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n  if (typeof arg2 === \"function\") {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 };\n  }\n  return { ...arg2, queryKey: arg1 };\n}\nfunction shouldThrowError(_useErrorBoundary, params) {\n  if (typeof _useErrorBoundary === \"function\") {\n    return _useErrorBoundary(...params);\n  }\n  return !!_useErrorBoundary;\n}\nfunction trackResult(result, observer) {\n  const trackedResult = {};\n  Object.keys(result).forEach((key) => {\n    Object.defineProperty(trackedResult, key, {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        observer.trackedProps.add(key);\n        return result[key];\n      }\n    });\n  });\n  return trackedResult;\n}\n\n// src/hooks/utils/query/useBaseQuery.ts\nfunction useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({ context: options.context });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options);\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    );\n  }\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    );\n  }\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    );\n  }\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n  const [observer] = React2.useState(\n    () => new Observer(\n      queryClient,\n      defaultedOptions\n    )\n  );\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore2(\n    React2.useCallback(\n      (onStoreChange) => isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  React2.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  React2.useEffect(() => {\n    observer.setOptions(defaultedOptions, { listeners: false });\n  }, [defaultedOptions, observer]);\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(({ data }) => {\n      defaultedOptions.onSuccess?.(data);\n      defaultedOptions.onSettled?.(data, null);\n    }).catch((error) => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError?.(error);\n      defaultedOptions.onSettled?.(void 0, error);\n    });\n  }\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [\n    result.error,\n    observer.getCurrentQuery()\n  ])) {\n    throw result.error;\n  }\n  const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n  const isIdle = status === \"idle\";\n  const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n  return {\n    ...result,\n    defaultedOptions,\n    isIdle,\n    isLoading,\n    observer,\n    status\n  };\n}\n\n// src/hooks/utils/query/useInfiniteQuery.ts\nimport { InfiniteQueryObserver } from \"@tanstack/react-query\";\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery(\n    { context: queryClientContext, ...parsedOptions },\n    InfiniteQueryObserver\n  );\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchNextPage: baseQuery.fetchNextPage,\n    fetchStatus: baseQuery.fetchStatus,\n    hasNextPage: baseQuery.hasNextPage,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isFetchingNextPage: baseQuery.isFetchingNextPage,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useMutation.ts\nimport {\n  parseMutationArgs,\n  useMutation as useMutation_\n} from \"@tanstack/react-query\";\nfunction useMutation(arg1, arg2, arg3) {\n  const options = parseMutationArgs(arg1, arg2, arg3);\n  return useMutation_({ context: queryClientContext, ...options });\n}\n\n// src/hooks/utils/query/useQuery.ts\nimport { QueryObserver } from \"@tanstack/react-query\";\nfunction useQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({ context: queryClientContext, ...parsedOptions }, QueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchStatus: baseQuery.fetchStatus,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useQueryClient.ts\nimport { useQueryClient as useQueryClient_ } from \"@tanstack/react-query\";\nvar useQueryClient2 = () => useQueryClient_({ context: queryClientContext });\n\n// src/hooks/providers/useProvider.ts\nimport { getProvider, watchProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useProvider({\n  chainId\n} = {}) {\n  return useSyncExternalStoreWithSelector(\n    (cb) => watchProvider({ chainId }, cb),\n    () => getProvider({ chainId }),\n    () => getProvider({ chainId }),\n    (x) => x,\n    (a, b) => a.network.chainId === b.network.chainId\n  );\n}\n\n// src/hooks/providers/useWebSocketProvider.ts\nimport { getWebSocketProvider, watchWebSocketProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector2 } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useWebSocketProvider({ chainId } = {}) {\n  return useSyncExternalStoreWithSelector2(\n    (cb) => watchWebSocketProvider({ chainId }, cb),\n    () => getWebSocketProvider({ chainId }),\n    () => getWebSocketProvider({ chainId }),\n    (x) => x,\n    (a, b) => a?.network.chainId === b?.network.chainId\n  );\n}\n\n// src/hooks/utils/useChainId.ts\nfunction useChainId({ chainId } = {}) {\n  const provider = useProvider({ chainId });\n  return provider.network.chainId;\n}\n\n// src/hooks/utils/useForceUpdate.ts\nimport * as React3 from \"react\";\nfunction useForceUpdate() {\n  const [, forceUpdate] = React3.useReducer((x) => x + 1, 0);\n  return forceUpdate;\n}\n\n// src/hooks/network-status/useBlockNumber.ts\nimport { fetchBlockNumber } from \"@wagmi/core\";\nimport { debounce } from \"@wagmi/core/internal\";\nimport * as React4 from \"react\";\nfunction queryKey({ chainId, scopeKey }) {\n  return [{ entity: \"blockNumber\", chainId, scopeKey }];\n}\nfunction queryFn({\n  queryKey: [{ chainId }]\n}) {\n  return fetchBlockNumber({ chainId });\n}\nfunction useBlockNumber({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  watch = false,\n  onBlock,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const provider = useProvider({ chainId });\n  const webSocketProvider = useWebSocketProvider({ chainId });\n  const queryClient = useQueryClient2();\n  React4.useEffect(() => {\n    if (!enabled)\n      return;\n    if (!watch && !onBlock)\n      return;\n    const listener = debounce((blockNumber) => {\n      if (watch)\n        queryClient.setQueryData(queryKey({ chainId, scopeKey }), blockNumber);\n      if (onBlock)\n        onBlock(blockNumber);\n    }, 1);\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"block\", listener);\n    return () => {\n      provider_.off(\"block\", listener);\n    };\n  }, [\n    chainId,\n    scopeKey,\n    onBlock,\n    provider,\n    queryClient,\n    watch,\n    webSocketProvider,\n    enabled\n  ]);\n  return useQuery(queryKey({ scopeKey, chainId }), queryFn, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/network-status/useFeeData.ts\nimport { fetchFeeData } from \"@wagmi/core\";\nimport * as React5 from \"react\";\nfunction queryKey2({\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{ entity: \"feeData\", chainId, formatUnits, scopeKey }];\n}\nfunction queryFn2({\n  queryKey: [{ chainId, formatUnits }]\n}) {\n  return fetchFeeData({ chainId, formatUnits });\n}\nfunction useFeeData({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits = \"wei\",\n  scopeKey,\n  staleTime,\n  suspense,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const queryKey_ = React5.useMemo(\n    () => queryKey2({\n      chainId,\n      formatUnits,\n      scopeKey\n    }),\n    [chainId, formatUnits, scopeKey]\n  );\n  const feeDataQuery = useQuery(queryKey_, queryFn2, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch),\n    queryKey: queryKey_\n  });\n  return feeDataQuery;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\nfunction useInvalidateOnBlock({\n  chainId,\n  enabled,\n  queryKey: queryKey17\n}) {\n  const queryClient = useQueryClient2();\n  useBlockNumber({\n    chainId,\n    enabled,\n    onBlock: enabled ? () => queryClient.invalidateQueries(queryKey17) : void 0,\n    scopeKey: enabled ? void 0 : \"idle\"\n  });\n}\n\n// src/hooks/utils/useSyncExternalStoreWithTracked.ts\nimport { deepEqual } from \"@wagmi/core\";\nimport * as React6 from \"react\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector3 } from \"use-sync-external-store/shim/with-selector.js\";\nvar isPlainObject = (obj) => typeof obj === \"object\" && !Array.isArray(obj);\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot, getServerSnapshot = getSnapshot, isEqual = deepEqual) {\n  const trackedKeys = React6.useRef([]);\n  const result = useSyncExternalStoreWithSelector3(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    (x) => x,\n    (a, b) => {\n      if (isPlainObject(a) && isPlainObject(b) && trackedKeys.current.length) {\n        for (const key of trackedKeys.current) {\n          const equal = isEqual(\n            a[key],\n            b[key]\n          );\n          if (!equal)\n            return false;\n        }\n        return true;\n      }\n      return isEqual(a, b);\n    }\n  );\n  if (isPlainObject(result)) {\n    const trackedResult = { ...result };\n    Object.defineProperties(\n      trackedResult,\n      Object.entries(trackedResult).reduce(\n        (res, [key, value]) => {\n          return {\n            ...res,\n            [key]: {\n              configurable: false,\n              enumerable: true,\n              get: () => {\n                if (!trackedKeys.current.includes(key)) {\n                  trackedKeys.current.push(key);\n                }\n                return value;\n              }\n            }\n          };\n        },\n        {}\n      )\n    );\n    return trackedResult;\n  }\n  return result;\n}\n\n// src/hooks/accounts/useAccount.ts\nfunction useAccount({ onConnect, onDisconnect } = {}) {\n  const account = useSyncExternalStoreWithTracked(watchAccount, getAccount);\n  const previousAccountRef = React7.useRef();\n  const previousAccount = previousAccountRef.current ?? {};\n  if (!!onConnect && (previousAccount.status !== \"connected\" || previousAccount.status === void 0) && account.status === \"connected\")\n    onConnect({\n      address: account.address,\n      connector: account.connector,\n      isReconnected: previousAccount.status === \"reconnecting\" || previousAccount.status === void 0\n    });\n  if (!!onDisconnect && previousAccount.status === \"connected\" && account.status === \"disconnected\")\n    onDisconnect();\n  previousAccountRef.current = account;\n  return account;\n}\n\n// src/hooks/accounts/useBalance.ts\nimport { fetchBalance } from \"@wagmi/core\";\nimport * as React8 from \"react\";\nfunction queryKey3({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey,\n  token\n}) {\n  return [\n    {\n      entity: \"balance\",\n      address,\n      chainId,\n      formatUnits,\n      scopeKey,\n      token\n    }\n  ];\n}\nfunction queryFn3({\n  queryKey: [{ address, chainId, formatUnits, token }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchBalance({ address, chainId, formatUnits, token });\n}\nfunction useBalance({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits,\n  scopeKey,\n  staleTime,\n  suspense,\n  token,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const queryKey_ = React8.useMemo(\n    () => queryKey3({ address, chainId, formatUnits, scopeKey, token }),\n    [address, chainId, formatUnits, scopeKey, token]\n  );\n  const balanceQuery = useQuery(queryKey_, queryFn3, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && address),\n    queryKey: queryKey_\n  });\n  return balanceQuery;\n}\n\n// src/hooks/accounts/useConnect.ts\nimport { connect } from \"@wagmi/core\";\nimport * as React9 from \"react\";\nvar mutationKey = (args) => [{ entity: \"connect\", ...args }];\nvar mutationFn = (args) => {\n  const { connector, chainId } = args;\n  if (!connector)\n    throw new Error(\"connector is required\");\n  return connect({ connector, chainId });\n};\nfunction useConnect({\n  chainId,\n  connector,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const client = useClient();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey({ connector, chainId }), mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const connect2 = React9.useCallback(\n    (args) => {\n      return mutate({\n        chainId: args?.chainId ?? chainId,\n        connector: args?.connector ?? connector\n      });\n    },\n    [chainId, connector, mutate]\n  );\n  const connectAsync = React9.useCallback(\n    (args) => {\n      return mutateAsync({\n        chainId: args?.chainId ?? chainId,\n        connector: args?.connector ?? connector\n      });\n    },\n    [chainId, connector, mutateAsync]\n  );\n  return {\n    connect: connect2,\n    connectAsync,\n    connectors: client.connectors,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingConnector: variables?.connector,\n    reset,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useDisconnect.ts\nimport { disconnect } from \"@wagmi/core\";\nvar mutationKey2 = [{ entity: \"disconnect\" }];\nvar mutationFn2 = () => disconnect();\nfunction useDisconnect({\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate: disconnect2,\n    mutateAsync: disconnectAsync,\n    reset,\n    status\n  } = useMutation(mutationKey2, mutationFn2, {\n    ...onError ? {\n      onError(error2, _variables, context) {\n        onError(error2, context);\n      }\n    } : {},\n    onMutate,\n    ...onSettled ? {\n      onSettled(_data, error2, _variables, context) {\n        onSettled(error2, context);\n      }\n    } : {},\n    ...onSuccess ? {\n      onSuccess(_data, _variables, context) {\n        onSuccess(context);\n      }\n    } : {}\n  });\n  return {\n    disconnect: disconnect2,\n    disconnectAsync,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status\n  };\n}\n\n// src/hooks/accounts/useNetwork.ts\nimport { getNetwork, watchNetwork } from \"@wagmi/core\";\nfunction useNetwork() {\n  return useSyncExternalStoreWithTracked(watchNetwork, getNetwork);\n}\n\n// src/hooks/accounts/useSigner.ts\nimport { fetchSigner, watchSigner } from \"@wagmi/core\";\nimport * as React10 from \"react\";\nfunction queryKey4({ chainId }) {\n  return [{ entity: \"signer\", chainId, persist: false }];\n}\nfunction queryFn4({\n  queryKey: [{ chainId }]\n}) {\n  return fetchSigner({ chainId });\n}\nfunction useSigner({\n  chainId: chainId_,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { connector } = useAccount();\n  const chainId = useChainId({ chainId: chainId_ });\n  const signerQuery = useQuery(queryKey4({ chainId }), queryFn4, {\n    cacheTime: 0,\n    enabled: Boolean(connector),\n    staleTime: Infinity,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  const queryClient = useQueryClient2();\n  React10.useEffect(() => {\n    const unwatch = watchSigner({ chainId }, (signer) => {\n      if (signer)\n        queryClient.invalidateQueries(queryKey4({ chainId }));\n      else\n        queryClient.removeQueries(queryKey4({ chainId }));\n    });\n    return unwatch;\n  }, [queryClient, chainId]);\n  return signerQuery;\n}\n\n// src/hooks/accounts/useSignMessage.ts\nimport { signMessage } from \"@wagmi/core\";\nimport * as React11 from \"react\";\nvar mutationKey3 = (args) => [{ entity: \"signMessage\", ...args }];\nvar mutationFn3 = (args) => {\n  const { message } = args;\n  if (!message)\n    throw new Error(\"message is required\");\n  return signMessage({ message });\n};\nfunction useSignMessage({\n  message,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey3({ message }), mutationFn3, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signMessage2 = React11.useCallback(\n    (args) => mutate(args || { message }),\n    [message, mutate]\n  );\n  const signMessageAsync = React11.useCallback(\n    (args) => mutateAsync(args || { message }),\n    [message, mutateAsync]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signMessage: signMessage2,\n    signMessageAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSignTypedData.ts\nimport { signTypedData } from \"@wagmi/core\";\nimport * as React12 from \"react\";\nfunction mutationKey4({ domain, types, value }) {\n  return [{ entity: \"signTypedData\", domain, types, value }];\n}\nfunction mutationFn4(args) {\n  const { domain, types, value } = args;\n  if (!domain)\n    throw new Error(\"domain is required\");\n  if (!types)\n    throw new Error(\"types is required\");\n  if (!value)\n    throw new Error(\"value is required\");\n  return signTypedData({\n    domain,\n    types,\n    value\n  });\n}\nfunction useSignTypedData({\n  domain,\n  types,\n  value,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey4({\n      domain,\n      types,\n      value\n    }),\n    mutationFn4,\n    {\n      onError,\n      onMutate,\n      onSettled,\n      onSuccess\n    }\n  );\n  const signTypedData2 = React12.useCallback(\n    (args) => mutate({\n      domain: args?.domain ?? domain,\n      types: args?.types ?? types,\n      value: args?.value ?? value\n    }),\n    [domain, types, value, mutate]\n  );\n  const signTypedDataAsync = React12.useCallback(\n    (args) => mutateAsync({\n      domain: args?.domain ?? domain,\n      types: args?.types ?? types,\n      value: args?.value ?? value\n    }),\n    [domain, types, value, mutateAsync]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signTypedData: signTypedData2,\n    signTypedDataAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSwitchNetwork.ts\nimport { switchNetwork } from \"@wagmi/core\";\nimport * as React13 from \"react\";\nvar mutationKey5 = (args) => [{ entity: \"switchNetwork\", ...args }];\nvar mutationFn5 = (args) => {\n  const { chainId } = args;\n  if (!chainId)\n    throw new Error(\"chainId is required\");\n  return switchNetwork({ chainId });\n};\nfunction useSwitchNetwork({\n  chainId,\n  throwForSwitchChainNotSupported,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const client = useClient();\n  const forceUpdate = useForceUpdate();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey5({ chainId }), mutationFn5, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const switchNetwork_ = React13.useCallback(\n    (chainId_) => mutate({ chainId: chainId_ ?? chainId }),\n    [chainId, mutate]\n  );\n  const switchNetworkAsync_ = React13.useCallback(\n    (chainId_) => mutateAsync({ chainId: chainId_ ?? chainId }),\n    [chainId, mutateAsync]\n  );\n  React13.useEffect(() => {\n    const unwatch = client.subscribe(\n      ({ chains, connector }) => ({\n        chains,\n        connector\n      }),\n      forceUpdate\n    );\n    return unwatch;\n  }, [client, forceUpdate]);\n  let switchNetwork2;\n  let switchNetworkAsync;\n  const supportsSwitchChain = !!client.connector?.switchChain;\n  if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n    switchNetwork2 = switchNetwork_;\n    switchNetworkAsync = switchNetworkAsync_;\n  }\n  return {\n    chains: client.chains ?? [],\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingChainId: variables?.chainId,\n    reset,\n    status,\n    switchNetwork: switchNetwork2,\n    switchNetworkAsync,\n    variables\n  };\n}\n\n// src/hooks/contracts/useContract.ts\nimport { getContract } from \"@wagmi/core\";\nimport * as React14 from \"react\";\nfunction useContract({\n  address,\n  abi,\n  signerOrProvider\n} = {}) {\n  return React14.useMemo(() => {\n    if (!address || !abi)\n      return null;\n    return getContract({\n      address,\n      abi,\n      signerOrProvider: signerOrProvider === null ? void 0 : signerOrProvider\n    });\n  }, [address, abi, signerOrProvider]);\n}\n\n// src/hooks/contracts/useContractEvent.ts\nimport * as React15 from \"react\";\nfunction useContractEvent({\n  address,\n  chainId,\n  abi,\n  listener,\n  eventName,\n  once\n} = {}) {\n  const provider = useProvider({ chainId });\n  const webSocketProvider = useWebSocketProvider({ chainId });\n  const contract = useContract({\n    address,\n    abi,\n    signerOrProvider: webSocketProvider ?? provider\n  });\n  const callbackRef = React15.useRef(listener);\n  callbackRef.current = listener;\n  React15.useEffect(() => {\n    if (!contract || !eventName)\n      return;\n    const handler = (...event) => callbackRef.current(...event);\n    if (once)\n      contract.once(eventName, handler);\n    else\n      contract.on(eventName, handler);\n    return () => {\n      contract.off(eventName, handler);\n    };\n  }, [contract, eventName]);\n}\n\n// src/hooks/contracts/useContractInfiniteReads.ts\nimport { replaceEqualDeep } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual2, readContracts } from \"@wagmi/core\";\nimport * as React16 from \"react\";\nfunction queryKey5({\n  allowFailure,\n  cacheKey,\n  overrides,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContractsInfinite\",\n      allowFailure,\n      cacheKey,\n      overrides,\n      scopeKey\n    }\n  ];\n}\nfunction queryFn5({\n  contracts\n}) {\n  return ({\n    queryKey: [{ allowFailure, overrides }],\n    pageParam\n  }) => {\n    return readContracts({\n      allowFailure,\n      contracts: contracts(pageParam || void 0),\n      overrides\n    });\n  };\n}\nfunction useContractInfiniteReads({\n  allowFailure,\n  cacheKey,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  getNextPageParam,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  overrides,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual2(oldData, newData) ? oldData : replaceEqualDeep(oldData, newData),\n  suspense\n}) {\n  const queryKey_ = React16.useMemo(\n    () => queryKey5({ allowFailure, cacheKey, overrides, scopeKey }),\n    [allowFailure, cacheKey, overrides, scopeKey]\n  );\n  const enabled = React16.useMemo(() => {\n    const enabled2 = Boolean(enabled_ && contracts);\n    return enabled2;\n  }, [contracts, enabled_]);\n  return useInfiniteQuery(queryKey_, queryFn5({ contracts }), {\n    cacheTime,\n    enabled,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    select,\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\nfunction paginatedIndexesConfig(fn, {\n  perPage,\n  start,\n  direction\n}) {\n  const contracts = (page = 0) => [...Array(perPage).keys()].map((index) => {\n    return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n  }).filter((index) => index >= 0).map(fn).flat();\n  return {\n    contracts,\n    getNextPageParam(lastPage, pages) {\n      return lastPage?.length === perPage ? pages.length : void 0;\n    }\n  };\n}\n\n// src/hooks/contracts/useContractRead.ts\nimport { replaceEqualDeep as replaceEqualDeep2 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual3, parseContractResult, readContract } from \"@wagmi/core\";\nimport * as React17 from \"react\";\nfunction queryKey6({\n  address,\n  args,\n  blockNumber,\n  chainId,\n  functionName,\n  overrides,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContract\",\n      address,\n      args,\n      blockNumber,\n      chainId,\n      functionName,\n      overrides,\n      scopeKey\n    }\n  ];\n}\nfunction queryFn6({ abi }) {\n  return async ({\n    queryKey: [{ address, args, chainId, functionName, overrides }]\n  }) => {\n    if (!abi)\n      throw new Error(\"abi is required\");\n    if (!address)\n      throw new Error(\"address is required\");\n    return await readContract({\n      address,\n      args,\n      chainId,\n      abi,\n      functionName,\n      overrides\n    }) ?? null;\n  };\n}\nfunction useContractRead({\n  abi,\n  address,\n  args,\n  cacheOnBlock = false,\n  cacheTime,\n  chainId: chainId_,\n  enabled: enabled_ = true,\n  functionName,\n  isDataEqual,\n  onError,\n  onSettled,\n  onSuccess,\n  overrides,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual3(oldData, newData) ? oldData : replaceEqualDeep2(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const { data: blockNumber } = useBlockNumber({\n    chainId,\n    enabled: watch || cacheOnBlock,\n    scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n    watch\n  });\n  const queryKey_ = React17.useMemo(\n    () => queryKey6({\n      address,\n      args,\n      blockNumber: cacheOnBlock ? blockNumber : void 0,\n      chainId,\n      functionName,\n      overrides,\n      scopeKey\n    }),\n    [\n      address,\n      args,\n      blockNumber,\n      cacheOnBlock,\n      chainId,\n      functionName,\n      overrides,\n      scopeKey\n    ]\n  );\n  const enabled = React17.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && abi && address && functionName);\n    if (cacheOnBlock)\n      enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [abi, address, blockNumber, cacheOnBlock, enabled_, functionName]);\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  return useQuery(\n    queryKey_,\n    queryFn6({\n      abi\n    }),\n    {\n      cacheTime,\n      enabled,\n      isDataEqual,\n      select(data) {\n        const result = abi && functionName ? parseContractResult({\n          abi,\n          data,\n          functionName\n        }) : data;\n        return select ? select(result) : result;\n      },\n      staleTime,\n      structuralSharing,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/contracts/useContractReads.ts\nimport { replaceEqualDeep as replaceEqualDeep3 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual4, parseContractResult as parseContractResult2, readContracts as readContracts2 } from \"@wagmi/core\";\nimport * as React18 from \"react\";\nfunction queryKey7({\n  allowFailure,\n  blockNumber,\n  chainId,\n  contracts,\n  overrides,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContracts\",\n      allowFailure,\n      blockNumber,\n      chainId,\n      scopeKey,\n      contracts: (contracts ?? []).map(\n        ({ address, args, chainId: chainId2, functionName }) => ({\n          address,\n          args,\n          chainId: chainId2,\n          functionName\n        })\n      ),\n      overrides\n    }\n  ];\n}\nfunction queryFn7({ abis }) {\n  return ({\n    queryKey: [{ allowFailure, contracts: contracts_, overrides }]\n  }) => {\n    const contracts = contracts_.map(\n      (contract, i) => ({\n        ...contract,\n        abi: abis[i]\n      })\n    );\n    return readContracts2({\n      allowFailure,\n      contracts,\n      overrides\n    });\n  };\n}\nfunction useContractReads({\n  allowFailure = true,\n  cacheOnBlock = false,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  overrides,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual4(oldData, newData) ? oldData : replaceEqualDeep3(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const { data: blockNumber } = useBlockNumber({\n    enabled: watch || cacheOnBlock,\n    watch\n  });\n  const chainId = useChainId();\n  const queryKey_ = React18.useMemo(\n    () => queryKey7({\n      allowFailure,\n      blockNumber: cacheOnBlock ? blockNumber : void 0,\n      chainId,\n      contracts,\n      overrides,\n      scopeKey\n    }),\n    [\n      allowFailure,\n      blockNumber,\n      cacheOnBlock,\n      chainId,\n      scopeKey,\n      contracts,\n      overrides\n    ]\n  );\n  const enabled = React18.useMemo(() => {\n    let enabled2 = Boolean(\n      enabled_ && contracts?.every(\n        (x) => x.abi && x.address && x.functionName\n      )\n    );\n    if (cacheOnBlock)\n      enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [blockNumber, cacheOnBlock, contracts, enabled_]);\n  useInvalidateOnBlock({\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  const abis = (contracts ?? []).map(\n    ({ abi }) => abi\n  );\n  return useQuery(queryKey_, queryFn7({ abis }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    keepPreviousData,\n    staleTime,\n    select(data) {\n      const result = data.map((data2, i) => {\n        const { abi, functionName } = contracts?.[i] ?? {};\n        return abi && functionName ? parseContractResult2({ abi, functionName, data: data2 }) : data2;\n      });\n      return select ? select(result) : result;\n    },\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractWrite.ts\nimport { writeContract } from \"@wagmi/core\";\nimport * as React19 from \"react\";\nfunction mutationKey6({\n  address,\n  args,\n  chainId,\n  abi,\n  functionName,\n  overrides,\n  request\n}) {\n  return [\n    {\n      entity: \"writeContract\",\n      address,\n      args,\n      chainId,\n      abi,\n      functionName,\n      overrides,\n      request\n    }\n  ];\n}\nfunction mutationFn6({\n  address,\n  args,\n  chainId,\n  abi,\n  functionName,\n  mode,\n  overrides,\n  request\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  if (!abi)\n    throw new Error(\"abi is required\");\n  if (!functionName)\n    throw new Error(\"functionName is required\");\n  switch (mode) {\n    case \"prepared\": {\n      if (!request)\n        throw new Error(\"request is required\");\n      return writeContract({\n        mode: \"prepared\",\n        address,\n        chainId,\n        abi,\n        functionName,\n        request\n      });\n    }\n    case \"recklesslyUnprepared\":\n      return writeContract({\n        address,\n        abi,\n        functionName,\n        args,\n        chainId,\n        mode: \"recklesslyUnprepared\",\n        overrides\n      });\n  }\n}\nfunction useContractWrite({\n  address,\n  args,\n  chainId,\n  abi,\n  functionName,\n  mode,\n  overrides,\n  request,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey6({\n      address,\n      abi,\n      functionName,\n      args,\n      chainId,\n      mode,\n      overrides,\n      request\n    }),\n    mutationFn6,\n    {\n      onError,\n      onMutate,\n      onSettled,\n      onSuccess\n    }\n  );\n  const write = React19.useCallback(\n    (overrideConfig) => {\n      return mutate({\n        address,\n        args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n        chainId,\n        abi,\n        functionName,\n        mode: overrideConfig ? \"recklesslyUnprepared\" : mode,\n        overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides,\n        request\n      });\n    },\n    [\n      address,\n      args,\n      chainId,\n      abi,\n      functionName,\n      mode,\n      mutate,\n      overrides,\n      request\n    ]\n  );\n  const writeAsync = React19.useCallback(\n    (overrideConfig) => {\n      return mutateAsync({\n        address,\n        args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n        chainId,\n        abi,\n        functionName,\n        mode: overrideConfig ? \"recklesslyUnprepared\" : mode,\n        overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides,\n        request\n      });\n    },\n    [\n      address,\n      args,\n      chainId,\n      abi,\n      functionName,\n      mode,\n      mutateAsync,\n      overrides,\n      request\n    ]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    write: mode === \"prepared\" && !request ? void 0 : write,\n    writeAsync: mode === \"prepared\" && !request ? void 0 : writeAsync\n  };\n}\n\n// src/hooks/contracts/usePrepareContractWrite.ts\nimport { prepareWriteContract } from \"@wagmi/core\";\nfunction queryKey8({\n  activeChainId,\n  args,\n  address,\n  chainId,\n  functionName,\n  overrides,\n  signerAddress\n}) {\n  return [\n    {\n      entity: \"prepareContractTransaction\",\n      activeChainId,\n      address,\n      args,\n      chainId,\n      functionName,\n      overrides,\n      signerAddress\n    }\n  ];\n}\nfunction queryFn8({\n  abi,\n  signer\n}) {\n  return ({\n    queryKey: [{ args, address, chainId, functionName, overrides }]\n  }) => {\n    if (!abi)\n      throw new Error(\"abi is required\");\n    return prepareWriteContract({\n      abi,\n      args,\n      address,\n      chainId,\n      functionName,\n      overrides,\n      signer\n    });\n  };\n}\nfunction usePrepareContractWrite({\n  address,\n  abi,\n  functionName,\n  chainId,\n  args,\n  overrides,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { chain: activeChain } = useNetwork();\n  const { data: signer } = useSigner({ chainId });\n  const prepareContractWriteQuery = useQuery(\n    queryKey8({\n      activeChainId: activeChain?.id,\n      address,\n      args,\n      chainId,\n      functionName,\n      scopeKey,\n      signerAddress: signer?._address,\n      overrides\n    }),\n    queryFn8({\n      abi,\n      signer\n    }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && abi && address && functionName && signer),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n  return Object.assign(prepareContractWriteQuery, {\n    config: {\n      abi,\n      address,\n      args,\n      functionName,\n      mode: \"prepared\",\n      overrides,\n      request: void 0,\n      ...prepareContractWriteQuery.data\n    }\n  });\n}\n\n// src/hooks/contracts/useToken.ts\nimport { fetchToken } from \"@wagmi/core\";\nfunction queryKey9({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{ entity: \"token\", address, chainId, formatUnits, scopeKey }];\n}\nfunction queryFn9({\n  queryKey: [{ address, chainId, formatUnits }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchToken({ address, chainId, formatUnits });\n}\nfunction useToken({\n  address,\n  chainId: chainId_,\n  formatUnits = \"ether\",\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(\n    queryKey9({ address, chainId, formatUnits, scopeKey }),\n    queryFn9,\n    {\n      cacheTime,\n      enabled: Boolean(enabled && address),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/ens/useEnsAddress.ts\nimport { fetchEnsAddress } from \"@wagmi/core\";\nfunction queryKey10({ chainId, name, scopeKey }) {\n  return [{ entity: \"ensAddress\", chainId, name, scopeKey }];\n}\nfunction queryFn10({\n  queryKey: [{ chainId, name }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return fetchEnsAddress({ chainId, name });\n}\nfunction useEnsAddress({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  name,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey10({ chainId, name, scopeKey }), queryFn10, {\n    cacheTime,\n    enabled: Boolean(enabled && chainId && name),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAvatar.ts\nimport { fetchEnsAvatar } from \"@wagmi/core\";\nfunction queryKey11({\n  address,\n  chainId,\n  scopeKey\n}) {\n  return [{ entity: \"ensAvatar\", address, chainId, scopeKey }];\n}\nfunction queryFn11({\n  queryKey: [{ address, chainId }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchEnsAvatar({ address, chainId });\n}\nfunction useEnsAvatar({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey11({ address, chainId, scopeKey }), queryFn11, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsName.ts\nimport { fetchEnsName } from \"@wagmi/core\";\nfunction queryKey12({\n  address,\n  chainId,\n  scopeKey\n}) {\n  return [{ entity: \"ensName\", address, chainId, scopeKey }];\n}\nfunction queryFn12({\n  queryKey: [{ address, chainId }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchEnsName({ address, chainId });\n}\nfunction useEnsName({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey12({ address, chainId, scopeKey }), queryFn12, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsResolver.ts\nimport { fetchEnsResolver } from \"@wagmi/core\";\nfunction queryKey13({ chainId, name, scopeKey }) {\n  return [\n    { entity: \"ensResolver\", chainId, name, scopeKey, persist: false }\n  ];\n}\nfunction queryFn13({\n  queryKey: [{ chainId, name }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return fetchEnsResolver({ chainId, name });\n}\nfunction useEnsResolver({\n  chainId: chainId_,\n  name,\n  enabled = true,\n  scopeKey,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey13({ chainId, name, scopeKey }), queryFn13, {\n    cacheTime: 0,\n    enabled: Boolean(enabled && chainId && name),\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/usePrepareSendTransaction.ts\nimport { prepareSendTransaction } from \"@wagmi/core\";\nfunction queryKey14({\n  activeChainId,\n  chainId,\n  request,\n  scopeKey,\n  signerAddress\n}) {\n  return [\n    {\n      entity: \"prepareSendTransaction\",\n      activeChainId,\n      chainId,\n      request,\n      scopeKey,\n      signerAddress\n    }\n  ];\n}\nfunction queryFn14({ signer }) {\n  return ({\n    queryKey: [{ chainId, request }]\n  }) => {\n    if (!request?.to)\n      throw new Error(\"request.to is required\");\n    return prepareSendTransaction({\n      chainId,\n      request: { ...request, to: request.to },\n      signer\n    });\n  };\n}\nfunction usePrepareSendTransaction({\n  chainId,\n  request,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { chain: activeChain } = useNetwork();\n  const { data: signer } = useSigner({ chainId });\n  const prepareSendTransactionQuery = useQuery(\n    queryKey14({\n      activeChainId: activeChain?.id,\n      chainId,\n      request,\n      scopeKey,\n      signerAddress: signer?._address\n    }),\n    queryFn14({ signer }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && signer && request && request.to),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n  return Object.assign(prepareSendTransactionQuery, {\n    config: {\n      request: void 0,\n      mode: \"prepared\",\n      ...prepareSendTransactionQuery.data\n    }\n  });\n}\n\n// src/hooks/transactions/useSendTransaction.ts\nimport { sendTransaction } from \"@wagmi/core\";\nimport * as React20 from \"react\";\nvar mutationKey7 = (args) => [{ entity: \"sendTransaction\", ...args }];\nvar mutationFn7 = ({ chainId, mode, request }) => {\n  return sendTransaction({\n    chainId,\n    mode,\n    request\n  });\n};\nfunction useSendTransaction({\n  chainId,\n  mode,\n  request,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey7({\n      chainId,\n      mode,\n      request\n    }),\n    mutationFn7,\n    {\n      onError,\n      onMutate,\n      onSettled,\n      onSuccess\n    }\n  );\n  const sendTransaction2 = React20.useCallback(\n    (args) => mutate({\n      chainId,\n      mode,\n      request: args?.recklesslySetUnpreparedRequest ?? request\n    }),\n    [chainId, mode, mutate, request]\n  );\n  const sendTransactionAsync = React20.useCallback(\n    (args) => mutateAsync({\n      chainId,\n      mode,\n      request: args?.recklesslySetUnpreparedRequest ?? request\n    }),\n    [chainId, mode, mutateAsync, request]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    sendTransaction: mode === \"prepared\" && !request ? void 0 : sendTransaction2,\n    sendTransactionAsync: mode === \"prepared\" && !request ? void 0 : sendTransactionAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/transactions/useTransaction.ts\nimport { fetchTransaction } from \"@wagmi/core\";\nfunction queryKey15({ chainId, hash, scopeKey }) {\n  return [{ entity: \"transaction\", chainId, hash, scopeKey }];\n}\nfunction queryFn15({\n  queryKey: [{ chainId, hash }]\n}) {\n  if (!hash)\n    throw new Error(\"hash is required\");\n  return fetchTransaction({ chainId, hash });\n}\nfunction useTransaction({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  hash,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey15({ chainId, hash, scopeKey }), queryFn15, {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWaitForTransaction.ts\nimport { waitForTransaction } from \"@wagmi/core\";\nfunction queryKey16({\n  confirmations,\n  chainId,\n  hash,\n  scopeKey,\n  timeout\n}) {\n  return [\n    {\n      entity: \"waitForTransaction\",\n      confirmations,\n      chainId,\n      hash,\n      scopeKey,\n      timeout\n    }\n  ];\n}\nfunction queryFn16({\n  onSpeedUp\n}) {\n  return ({\n    queryKey: [{ chainId, confirmations, hash, timeout }]\n  }) => {\n    if (!hash)\n      throw new Error(\"hash is required\");\n    return waitForTransaction({\n      chainId,\n      confirmations,\n      hash,\n      onSpeedUp,\n      timeout\n    });\n  };\n}\nfunction useWaitForTransaction({\n  chainId: chainId_,\n  confirmations,\n  hash,\n  timeout,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSpeedUp,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(\n    queryKey16({ chainId, confirmations, hash, scopeKey, timeout }),\n    queryFn16({ onSpeedUp }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && hash),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/transactions/useWatchPendingTransactions.ts\nimport * as React21 from \"react\";\nfunction useWatchPendingTransactions({\n  chainId: chainId_,\n  enabled = true,\n  listener\n}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const provider = useProvider({ chainId });\n  const webSocketProvider = useWebSocketProvider({ chainId });\n  React21.useEffect(() => {\n    if (!enabled)\n      return;\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"pending\", listener);\n    return () => {\n      provider_.off(\"pending\", listener);\n    };\n  }, [enabled, listener, provider, webSocketProvider]);\n}\n\n// src/index.ts\nimport {\n  AddChainError,\n  ChainDoesNotSupportMulticallError,\n  ChainMismatchError,\n  ChainNotConfiguredError,\n  Connector,\n  ConnectorAlreadyConnectedError,\n  ConnectorNotFoundError,\n  ContractMethodDoesNotExistError,\n  ContractMethodNoResultError,\n  ContractMethodRevertedError,\n  ContractResultDecodeError,\n  ProviderChainsNotFound,\n  ProviderRpcError,\n  ResourceUnavailableError,\n  RpcError,\n  SwitchChainError,\n  SwitchChainNotSupportedError,\n  UserRejectedRequestError,\n  configureChains,\n  createStorage as createStorage2,\n  deepEqual as deepEqual5,\n  deserialize,\n  erc20ABI,\n  erc721ABI,\n  erc4626ABI,\n  goerli,\n  mainnet,\n  readContracts as readContracts3,\n  serialize\n} from \"@wagmi/core\";\nexport {\n  AddChainError,\n  ChainDoesNotSupportMulticallError,\n  ChainMismatchError,\n  ChainNotConfiguredError,\n  Connector,\n  ConnectorAlreadyConnectedError,\n  ConnectorNotFoundError,\n  Context,\n  ContractMethodDoesNotExistError,\n  ContractMethodNoResultError,\n  ContractMethodRevertedError,\n  ContractResultDecodeError,\n  ProviderChainsNotFound,\n  ProviderRpcError,\n  ResourceUnavailableError,\n  RpcError,\n  SwitchChainError,\n  SwitchChainNotSupportedError,\n  UserRejectedRequestError,\n  WagmiConfig,\n  configureChains,\n  createClient,\n  createStorage2 as createStorage,\n  deepEqual5 as deepEqual,\n  deserialize,\n  erc20ABI,\n  erc4626ABI,\n  erc721ABI,\n  goerli,\n  mainnet,\n  paginatedIndexesConfig,\n  readContracts3 as readContracts,\n  serialize,\n  useAccount,\n  useBalance,\n  useBlockNumber,\n  useChainId,\n  useClient,\n  useConnect,\n  useContract,\n  useContractEvent,\n  useContractInfiniteReads,\n  useContractRead,\n  useContractReads,\n  useContractWrite,\n  useDisconnect,\n  useEnsAddress,\n  useEnsAvatar,\n  useEnsName,\n  useEnsResolver,\n  useFeeData,\n  useInfiniteQuery,\n  useMutation,\n  useNetwork,\n  usePrepareContractWrite,\n  usePrepareSendTransaction,\n  useProvider,\n  useQuery,\n  useQueryClient2 as useQueryClient,\n  useSendTransaction,\n  useSignMessage,\n  useSignTypedData,\n  useSigner,\n  useSwitchNetwork,\n  useToken,\n  useTransaction,\n  useWaitForTransaction,\n  useWatchPendingTransactions,\n  useWebSocketProvider\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}