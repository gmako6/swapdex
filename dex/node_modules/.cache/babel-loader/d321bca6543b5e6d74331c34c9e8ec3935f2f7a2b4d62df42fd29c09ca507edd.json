{"ast":null,"code":"import { Connector, __privateAdd, __privateGet, __privateSet, __publicField } from \"./chunk-5NCTPR6C.js\";\n\n// src/injected.ts\nimport { AddChainError, ChainNotConfiguredError, ConnectorNotFoundError, ResourceUnavailableError, SwitchChainError, UserRejectedRequestError, getClient, normalizeChainId } from \"@wagmi/core\";\nimport { providers } from \"ethers\";\nimport { getAddress, hexValue } from \"ethers/lib/utils.js\";\n\n// src/utils/getInjectedName.ts\nfunction getInjectedName(ethereum) {\n  if (!ethereum) return \"Injected\";\n  const getName = provider => {\n    if (provider.isAvalanche) return \"Core Wallet\";\n    if (provider.isBitKeep) return \"BitKeep\";\n    if (provider.isBraveWallet) return \"Brave Wallet\";\n    if (provider.isCoinbaseWallet) return \"Coinbase Wallet\";\n    if (provider.isExodus) return \"Exodus\";\n    if (provider.isFrame) return \"Frame\";\n    if (provider.isKuCoinWallet) return \"KuCoin Wallet\";\n    if (provider.isMathWallet) return \"MathWallet\";\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) return \"1inch Wallet\";\n    if (provider.isOpera) return \"Opera\";\n    if (provider.isPortal) return \"Ripio Portal\";\n    if (provider.isRainbow) return \"Rainbow\";\n    if (provider.isTally) return \"Tally\";\n    if (provider.isTokenPocket) return \"TokenPocket\";\n    if (provider.isTokenary) return \"Tokenary\";\n    if (provider.isTrust || provider.isTrustWallet) return \"Trust Wallet\";\n    if (provider.isMetaMask) return \"MetaMask\";\n  };\n  if (ethereum.providers?.length) {\n    const nameSet = /* @__PURE__ */new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) return names;\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\n// src/injected.ts\nvar _provider, _switchingChains;\nvar InjectedConnector = class extends Connector {\n  constructor() {\n    let {\n      chains,\n      options: options_\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = {\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider: () => typeof window !== \"undefined\" ? window.ethereum : void 0,\n      ...options_\n    };\n    super({\n      chains,\n      options\n    });\n    __publicField(this, \"id\");\n    __publicField(this, \"name\");\n    __publicField(this, \"ready\");\n    __privateAdd(this, _provider, void 0);\n    __privateAdd(this, _switchingChains, void 0);\n    __publicField(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    __publicField(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) this.emit(\"disconnect\");else this.emit(\"change\", {\n        account: getAddress(accounts[0])\n      });\n    });\n    __publicField(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    __publicField(this, \"onDisconnect\", () => {\n      if (this.options.shimChainChangedDisconnect && __privateGet(this, _switchingChains)) {\n        __privateSet(this, _switchingChains, false);\n        return;\n      }\n      this.emit(\"disconnect\");\n      if (this.options.shimDisconnect) getClient().storage?.removeItem(this.shimDisconnectKey);\n    });\n    const provider = options.getProvider();\n    if (typeof options.name === \"string\") this.name = options.name;else if (provider) {\n      const detectedName = getInjectedName(provider);\n      if (options.name) this.name = options.name(detectedName);else {\n        if (typeof detectedName === \"string\") this.name = detectedName;else this.name = detectedName[0];\n      }\n    } else this.name = \"Injected\";\n    this.id = \"injected\";\n    this.ready = !!provider;\n  }\n  async connect() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = getAddress(accounts[0]);\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options.shimDisconnect) getClient().storage?.setItem(this.shimDisconnectKey, true);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider\n      };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      if (error.code === -32002) throw new ResourceUnavailableError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) return;\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    if (this.options.shimDisconnect) getClient().storage?.removeItem(this.shimDisconnectKey);\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) __privateSet(this, _provider, provider);\n    return __privateGet(this, _provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      if (this.options.shimDisconnect && !getClient().storage?.getItem(this.shimDisconnectKey)) return false;\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    if (this.options.shimChainChangedDisconnect) __privateSet(this, _switchingChains, true);\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    const id = hexValue(chainId);\n    try {\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: id\n        }]\n      });\n      return this.chains.find(x => x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${id}`,\n        network: `${id}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpcUrls: {\n          default: {\n            http: [\"\"]\n          },\n          public: {\n            http: [\"\"]\n          }\n        }\n      };\n    } catch (error) {\n      const chain = this.chains.find(x => x.id === chainId);\n      if (!chain) throw new ChainNotConfiguredError({\n        chainId,\n        connectorId: this.id\n      });\n      if (error.code === 4902 || error?.data?.originalError?.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: id,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: [chain.rpcUrls.public?.http[0] ?? \"\"],\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          return chain;\n        } catch (addError) {\n          if (this.isUserRejectedRequestError(addError)) throw new UserRejectedRequestError(error);\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      throw new SwitchChainError(error);\n    }\n  }\n  async watchAsset(_ref) {\n    let {\n      address,\n      decimals = 18,\n      image,\n      symbol\n    } = _ref;\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n};\n_provider = new WeakMap();\n_switchingChains = new WeakMap();\nexport { InjectedConnector };","map":{"version":3,"names":["Connector","__privateAdd","__privateGet","__privateSet","__publicField","AddChainError","ChainNotConfiguredError","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","getClient","normalizeChainId","providers","getAddress","hexValue","getInjectedName","ethereum","getName","provider","isAvalanche","isBitKeep","isBraveWallet","isCoinbaseWallet","isExodus","isFrame","isKuCoinWallet","isMathWallet","isOneInchIOSWallet","isOneInchAndroidWallet","isOpera","isPortal","isRainbow","isTally","isTokenPocket","isTokenary","isTrust","isTrustWallet","isMetaMask","length","nameSet","Set","unknownCount","name","add","names","_provider","_switchingChains","InjectedConnector","constructor","chains","options","options_","arguments","undefined","shimDisconnect","shimChainChangedDisconnect","getProvider","window","accounts","emit","account","chainId","id","unsupported","isChainUnsupported","chain","storage","removeItem","shimDisconnectKey","detectedName","ready","connect","on","onAccountsChanged","onChainChanged","onDisconnect","type","request","method","getChainId","switchChain","setItem","error","isUserRejectedRequestError","code","disconnect","removeListener","getAccount","then","getSigner","Promise","all","Web3Provider","isAuthorized","getItem","params","find","x","network","nativeCurrency","decimals","symbol","rpcUrls","default","http","public","connectorId","data","originalError","chainName","blockExplorerUrls","getBlockExplorerUrls","addError","watchAsset","_ref","address","image","WeakMap"],"sources":["/Volumes/Gmako-DATA/DAPP Projects/SwapDex/swapdex/dex/node_modules/@wagmi/connectors/dist/chunk-YUNHZJBB.js"],"sourcesContent":["import {\n  Connector,\n  __privateAdd,\n  __privateGet,\n  __privateSet,\n  __publicField\n} from \"./chunk-5NCTPR6C.js\";\n\n// src/injected.ts\nimport {\n  AddChainError,\n  ChainNotConfiguredError,\n  ConnectorNotFoundError,\n  ResourceUnavailableError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getClient,\n  normalizeChainId\n} from \"@wagmi/core\";\nimport { providers } from \"ethers\";\nimport { getAddress, hexValue } from \"ethers/lib/utils.js\";\n\n// src/utils/getInjectedName.ts\nfunction getInjectedName(ethereum) {\n  if (!ethereum)\n    return \"Injected\";\n  const getName = (provider) => {\n    if (provider.isAvalanche)\n      return \"Core Wallet\";\n    if (provider.isBitKeep)\n      return \"BitKeep\";\n    if (provider.isBraveWallet)\n      return \"Brave Wallet\";\n    if (provider.isCoinbaseWallet)\n      return \"Coinbase Wallet\";\n    if (provider.isExodus)\n      return \"Exodus\";\n    if (provider.isFrame)\n      return \"Frame\";\n    if (provider.isKuCoinWallet)\n      return \"KuCoin Wallet\";\n    if (provider.isMathWallet)\n      return \"MathWallet\";\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet)\n      return \"1inch Wallet\";\n    if (provider.isOpera)\n      return \"Opera\";\n    if (provider.isPortal)\n      return \"Ripio Portal\";\n    if (provider.isRainbow)\n      return \"Rainbow\";\n    if (provider.isTally)\n      return \"Tally\";\n    if (provider.isTokenPocket)\n      return \"TokenPocket\";\n    if (provider.isTokenary)\n      return \"Tokenary\";\n    if (provider.isTrust || provider.isTrustWallet)\n      return \"Trust Wallet\";\n    if (provider.isMetaMask)\n      return \"MetaMask\";\n  };\n  if (ethereum.providers?.length) {\n    const nameSet = /* @__PURE__ */ new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length)\n      return names;\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\n// src/injected.ts\nvar _provider, _switchingChains;\nvar InjectedConnector = class extends Connector {\n  constructor({\n    chains,\n    options: options_\n  } = {}) {\n    const options = {\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider: () => typeof window !== \"undefined\" ? window.ethereum : void 0,\n      ...options_\n    };\n    super({ chains, options });\n    __publicField(this, \"id\");\n    __publicField(this, \"name\");\n    __publicField(this, \"ready\");\n    __privateAdd(this, _provider, void 0);\n    __privateAdd(this, _switchingChains, void 0);\n    __publicField(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    __publicField(this, \"onAccountsChanged\", (accounts) => {\n      if (accounts.length === 0)\n        this.emit(\"disconnect\");\n      else\n        this.emit(\"change\", {\n          account: getAddress(accounts[0])\n        });\n    });\n    __publicField(this, \"onChainChanged\", (chainId) => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", { chain: { id, unsupported } });\n    });\n    __publicField(this, \"onDisconnect\", () => {\n      if (this.options.shimChainChangedDisconnect && __privateGet(this, _switchingChains)) {\n        __privateSet(this, _switchingChains, false);\n        return;\n      }\n      this.emit(\"disconnect\");\n      if (this.options.shimDisconnect)\n        getClient().storage?.removeItem(this.shimDisconnectKey);\n    });\n    const provider = options.getProvider();\n    if (typeof options.name === \"string\")\n      this.name = options.name;\n    else if (provider) {\n      const detectedName = getInjectedName(provider);\n      if (options.name)\n        this.name = options.name(detectedName);\n      else {\n        if (typeof detectedName === \"string\")\n          this.name = detectedName;\n        else\n          this.name = detectedName[0];\n      }\n    } else\n      this.name = \"Injected\";\n    this.id = \"injected\";\n    this.ready = !!provider;\n  }\n  async connect({ chainId } = {}) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider)\n        throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", { type: \"connecting\" });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = getAddress(accounts[0]);\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options.shimDisconnect)\n        getClient().storage?.setItem(this.shimDisconnectKey, true);\n      return { account, chain: { id, unsupported }, provider };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error))\n        throw new UserRejectedRequestError(error);\n      if (error.code === -32002)\n        throw new ResourceUnavailableError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    if (!provider?.removeListener)\n      return;\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    if (this.options.shimDisconnect)\n      getClient().storage?.removeItem(this.shimDisconnectKey);\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider)\n      throw new ConnectorNotFoundError();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider)\n      throw new ConnectorNotFoundError();\n    return provider.request({ method: \"eth_chainId\" }).then(normalizeChainId);\n  }\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider)\n      __privateSet(this, _provider, provider);\n    return __privateGet(this, _provider);\n  }\n  async getSigner({ chainId } = {}) {\n    const [provider, account] = await Promise.all([\n      this.getProvider(),\n      this.getAccount()\n    ]);\n    return new providers.Web3Provider(\n      provider,\n      chainId\n    ).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      if (this.options.shimDisconnect && !getClient().storage?.getItem(this.shimDisconnectKey))\n        return false;\n      const provider = await this.getProvider();\n      if (!provider)\n        throw new ConnectorNotFoundError();\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    if (this.options.shimChainChangedDisconnect)\n      __privateSet(this, _switchingChains, true);\n    const provider = await this.getProvider();\n    if (!provider)\n      throw new ConnectorNotFoundError();\n    const id = hexValue(chainId);\n    try {\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: id }]\n      });\n      return this.chains.find((x) => x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${id}`,\n        network: `${id}`,\n        nativeCurrency: { name: \"Ether\", decimals: 18, symbol: \"ETH\" },\n        rpcUrls: { default: { http: [\"\"] }, public: { http: [\"\"] } }\n      };\n    } catch (error) {\n      const chain = this.chains.find((x) => x.id === chainId);\n      if (!chain)\n        throw new ChainNotConfiguredError({ chainId, connectorId: this.id });\n      if (error.code === 4902 || error?.data?.originalError?.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: id,\n                chainName: chain.name,\n                nativeCurrency: chain.nativeCurrency,\n                rpcUrls: [chain.rpcUrls.public?.http[0] ?? \"\"],\n                blockExplorerUrls: this.getBlockExplorerUrls(chain)\n              }\n            ]\n          });\n          return chain;\n        } catch (addError) {\n          if (this.isUserRejectedRequestError(addError))\n            throw new UserRejectedRequestError(error);\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error))\n        throw new UserRejectedRequestError(error);\n      throw new SwitchChainError(error);\n    }\n  }\n  async watchAsset({\n    address,\n    decimals = 18,\n    image,\n    symbol\n  }) {\n    const provider = await this.getProvider();\n    if (!provider)\n      throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n};\n_provider = new WeakMap();\n_switchingChains = new WeakMap();\n\nexport {\n  InjectedConnector\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}